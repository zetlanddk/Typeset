{"version":3,"sources":["webpack:///typeset.min.js","webpack:///webpack/bootstrap e9a5937460dc75897240","webpack:///./src/index.js","webpack:///./src/quotes.js","webpack:///./src/ligatures.js","webpack:///./src/smallCaps.js","webpack:///./~/html-entities/index.js","webpack:///./~/html-entities/lib/xml-entities.js","webpack:///./~/html-entities/lib/html4-entities.js","webpack:///./~/html-entities/lib/html5-entities.js","webpack:///./src/punctuation.js","webpack:///./src/hangingPunctuation.js","webpack:///./src/spaces.js","webpack:///./src/eachTextNode.js","webpack:///external \"jQuery\""],"names":["typeset","modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","quotes","ligatures","smallCaps","punctuation","hangingPunctuation","spaces","eachTextNode","html","options","i","enable","indexOf","disable","replace","text","node","$","parent","is","parentText","start","contents","each","this","length","slice","isAcronym","word","trim","onlyNumbers","test","toUpperCase","removeCruft","wordSplitters","split","concat","ignore","encodedIgnore","encodedWordSplitters","x","entities","encode","trailing","leading","ignoreThis","endOfWord","match","j","startOfWord","Entities","AllHtmlEntities","RegExp","wordList","brokenWord","join","XmlEntities","Html4Entities","Html5Entities","ALPHA_INDEX","&lt","&gt","&quot","&apos","&amp","&lt;","&gt;","&quot;","&apos;","&amp;","CHAR_INDEX","60","62","34","39","38","CHAR_S_INDEX","<",">","\"","'","&","prototype","str","s","decode","charAt","code","toLowerCase","parseInt","substr","isNaN","String","fromCharCode","encodeNonUTF","strLength","result","charCodeAt","alpha","encodeNonASCII","strLenght","HTML_ALPHA","HTML_CODES","alphaIndex","numIndex","a","entity","chr","cc","createIndexes","charIndex","ENTITIES","_results","charInfo","e","chars","addChar","chr2","push","NBSP","NBSP_PUNCTUATION_START","NBSP_PUNCTUATION_END","pull","className","content","hasAdjacentText","prev","children","lastChild","type","parentPrev","data","doubleWidth","singleWidth","words","b","insert","cheerio","jquery","escape","IGNORE","doThis","findTextNodes","childNode","nodeType","replaceWith","only","load","decodeEntities","processedText","jQuery"],"mappings":"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","file":"typeset.min.js","sourcesContent":["/*!\n * typeset - Typesetting for the web\n * @version v0.2.2\n * @link https://github.com/davidmerfield/Typeset.js\n * @author David Merfield\n * @license MIT\n */\nvar typeset =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar modules = {\n\t  quotes: __webpack_require__(1),\n\t  // hyphenate: require('./hyphenate'),\n\t  ligatures: __webpack_require__(2),\n\t  smallCaps: __webpack_require__(3),\n\t  punctuation: __webpack_require__(8),\n\t  hangingPunctuation: __webpack_require__(9),\n\t  spaces: __webpack_require__(10)\n\t};\n\t\n\tvar eachTextNode = __webpack_require__(11);\n\t\n\tmodule.exports = function(html, options){\n\t\n\t  options = options || {};\n\t\n\t  for (var i in modules) {\n\t\n\t    // Check against enable list\n\t    if (options.enable && options.enable.indexOf(i) === -1)\n\t      continue;\n\t\n\t    // Check against disable list\n\t    if (options.disable && options.disable.indexOf(i) !== -1)\n\t      continue;\n\t\n\t    // Pass the HTML to each module\n\t    html = eachTextNode(html, modules[i], options);\n\t  }\n\t\n\t  return html;\n\t};\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function(text, node, $){\n\t\n\t  // This helps resolve substitution issues\n\t  // when a next node is adjacent to another text node,\n\t  // e.g. a link tag or emphasis tag.\n\t\n\t  // this only works if replace does not modify the length\n\t  // of the string it is passed. therefore the\n\t  if ($(node).parent().is('p, blockquote') && $(node).parent().text() !== text) {\n\t\n\t    var parentText = replace($(node).parent().text());\n\t    var start = 0;\n\t\n\t    $(node).parent().contents().each(function(){\n\t\n\t      if (this === node) return false;\n\t\n\t      start += $(this).text().length;\n\t    });\n\t\n\t    return parentText.slice(start, start + text.length);\n\t  }\n\t\n\t  return replace(text);\n\t};\n\t\n\tfunction replace (text) {\n\t\n\t  // Revert encoded chars so the regex mystery\n\t  // below works properly\n\t\n\t  text = text\n\t    .replace(/(\\W|^)\"([^\\s\\!\\?:;\\.,‽»])/g, '$1\\u201c$2') // beginning \"\n\t    .replace(/(\\u201c[^\"]*)\"([^\"]*$|[^\\u201c\"]*\\u201c)/g, '$1\\u201d$2') // ending \"\n\t    .replace(/([^0-9])\"/g,'$1\\u201d') // remaining \" at end of word\n\t    .replace(/(\\W|^)'(\\S)/g, '$1\\u2018$2') // beginning '\n\t    .replace(/([a-z])'([a-z])/ig, '$1\\u2019$2') // conjunction's possession\n\t    .replace(/((\\u2018[^']*)|[a-z])'([^0-9]|$)/ig, '$1\\u2019$3') // ending '\n\t    .replace(/(\\u2018)([0-9]{2}[^\\u2019]*)(\\u2018([^0-9]|$)|$|\\u2019[a-z])/ig, '\\u2019$2$3') // abbrev. years like '93\n\t    .replace(/(\\B|^)\\u2018(?=([^\\u2019]*\\u2019\\b)*([^\\u2019\\u2018]*\\W[\\u2019\\u2018]\\b|[^\\u2019\\u2018]*$))/ig, '$1\\u2019') // backwards apostrophe\n\t    .replace(/'''/g, '\\u2034') // triple prime\n\t    .replace(/(\"|'')/g, '\\u2033') // double prime\n\t    .replace(/'/g, '\\u2032');\n\t\n\t  // Allow escaped quotes\n\t  text = text.replace(/\\\\“/, '\\\"');\n\t  text = text.replace(/\\\\”/, '\\\"');\n\t  text = text.replace(/\\\\’/, '\\'');\n\t  text = text.replace(/\\\\‘/, '\\'');\n\t\n\t  return text;\n\t}\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function(text){\n\t\n\t  text = text.replace(/fi/g, 'ﬁ');\n\t  text = text.replace(/fl/g, 'ﬂ');\n\t\n\t  return text;\n\t};\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Entities = __webpack_require__(4).AllHtmlEntities;\n\tvar entities = new Entities();\n\t\n\t// Only numbers regex\n\tvar onlyNumbers = new RegExp('^\\\\d+$');\n\t\n\t// Ensure the word has a length of more than 2 letters,\n\t// does not contain punctation since exterior punctuation\n\t// has been stripped by this point. If so, then see if the\n\t// uppercase version of the word is indentical, if so it's\n\t// very probably an acronym\n\tfunction isAcronym (word) {\n\t\n\t  return word.length &&\n\t    word.trim().length > 1 &&\n\t    !(onlyNumbers.test(word.replace(/[\\.,-\\/#!–$%°\\^&\\*;?:+′|@\\[\\]{}=\\-_`~()]/g,\"\"))) &&\n\t    word.replace(/[\\.,-\\/#!$%\\^&\\*;–?:+|@\\[\\]{}=\\-_`~(′°)]/g,\"\") === word &&\n\t    word.toUpperCase() === word;\n\t}\n\t\n\tfunction removeCruft (word) {\n\t\n\t  var wordSplitters = \"-‘’′‘’'\".split('').concat(['&#39;']);\n\t  var ignore = \"{}()-‘’[]!#$*&;:,.“”″′‘’\\\"'\".split('').concat(['&quot;']);\n\t\n\t  var encodedIgnore = ignore.slice(0);\n\t  var encodedWordSplitters = wordSplitters.slice(0);\n\t\n\t  for (var x in encodedIgnore)\n\t    encodedIgnore[x] = entities.encode(encodedIgnore[x]);\n\t\n\t  for (var x in encodedWordSplitters)\n\t    encodedWordSplitters[x] = entities.encode(encodedWordSplitters[x]);\n\t\n\t  ignore = ignore.concat(encodedIgnore);\n\t  wordSplitters = wordSplitters.concat(encodedWordSplitters);\n\t\n\t  var trailing = '',\n\t  leading = '';\n\t\n\t  for (var i = 0; i < wordSplitters.length; i++) {\n\t\n\t    var ignoreThis = wordSplitters[i];\n\t    var endOfWord = (word.match(ignoreThis+'.*$') || [])[0];\n\t\n\t    if (endOfWord && endOfWord != word) {\n\t      trailing = endOfWord + trailing;\n\t      word = word.slice(0, -endOfWord.length);\n\t      i = 0;continue;\n\t    }\n\t\n\t  }\n\t\n\t  for (var j = 0; j < wordSplitters.length; j++) {\n\t\n\t    var ignoreThis = wordSplitters[j];\n\t    var startOfWord = (word.match('^.*'+ignoreThis) || [])[0];\n\t\n\t    if (startOfWord) {\n\t      leading += startOfWord;\n\t      word = word.slice(startOfWord.length);\n\t      j = 0;continue;\n\t    }\n\t\n\t  }\n\t\n\t  for (var i = 0; i < ignore.length; i++) {\n\t\n\t    var ignoreThis = ignore[i],\n\t    endOfWord = word.slice(-ignoreThis.length);\n\t\n\t    if (endOfWord === ignoreThis) {\n\t      trailing = ignoreThis + trailing;\n\t      word = word.slice(0, -ignoreThis.length);\n\t      i = 0;continue;\n\t    }\n\t\n\t  }\n\t\n\t  for (var j = 0; j < ignore.length; j++) {\n\t\n\t    var ignoreThis = ignore[j],\n\t    startOfWord = word.slice(0, ignoreThis.length);\n\t\n\t    if (startOfWord === ignoreThis) {\n\t      leading += ignoreThis;\n\t      word = word.slice(ignoreThis.length);\n\t      j = 0;continue;\n\t    }\n\t\n\t  }\n\t\n\t  return [leading, word, trailing];\n\t}\n\t\n\tmodule.exports = function(text){\n\t\n\t  var wordList = text.split(' ');\n\t\n\t  for (var i in wordList) {\n\t\n\t    var brokenWord = removeCruft(wordList[i]),\n\t    word = brokenWord[1],\n\t    leading = brokenWord[0],\n\t    trailing = brokenWord[2];\n\t\n\t    if (isAcronym(word)) {\n\t      wordList[i] = leading + '<span class=\"small-caps\">' + word + '</span>' + trailing;\n\t    }\n\t  }\n\t\n\t  return  wordList.join(' ');\n\t};\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = {\n\t  XmlEntities: __webpack_require__(5),\n\t  Html4Entities: __webpack_require__(6),\n\t  Html5Entities: __webpack_require__(7),\n\t  AllHtmlEntities: __webpack_require__(7)\n\t};\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\tvar ALPHA_INDEX = {\n\t    '&lt': '<',\n\t    '&gt': '>',\n\t    '&quot': '\"',\n\t    '&apos': '\\'',\n\t    '&amp': '&',\n\t    '&lt;': '<',\n\t    '&gt;': '>',\n\t    '&quot;': '\"',\n\t    '&apos;': '\\'',\n\t    '&amp;': '&'\n\t};\n\t\n\tvar CHAR_INDEX = {\n\t    60: 'lt',\n\t    62: 'gt',\n\t    34: 'quot',\n\t    39: 'apos',\n\t    38: 'amp'\n\t};\n\t\n\tvar CHAR_S_INDEX = {\n\t    '<': '&lt;',\n\t    '>': '&gt;',\n\t    '\"': '&quot;',\n\t    '\\'': '&apos;',\n\t    '&': '&amp;'\n\t};\n\t\n\t/**\n\t * @constructor\n\t */\n\tfunction XmlEntities() {}\n\t\n\t/**\n\t * @param {String} str\n\t * @returns {String}\n\t */\n\tXmlEntities.prototype.encode = function(str) {\n\t    if (str.length === 0) {\n\t        return '';\n\t    }\n\t    return str.replace(/<|>|\"|'|&/g, function(s) {\n\t        return CHAR_S_INDEX[s];\n\t    });\n\t};\n\t\n\t/**\n\t * @param {String} str\n\t * @returns {String}\n\t */\n\t XmlEntities.encode = function(str) {\n\t    return new XmlEntities().encode(str);\n\t };\n\t\n\t/**\n\t * @param {String} str\n\t * @returns {String}\n\t */\n\tXmlEntities.prototype.decode = function(str) {\n\t    if (str.length === 0) {\n\t        return '';\n\t    }\n\t    return str.replace(/&#?[0-9a-zA-Z]+;?/g, function(s) {\n\t        if (s.charAt(1) === '#') {\n\t            var code = s.charAt(2).toLowerCase() === 'x' ?\n\t                parseInt(s.substr(3), 16) :\n\t                parseInt(s.substr(2));\n\t\n\t            if (isNaN(code) || code < -32768 || code > 65535) {\n\t                return '';\n\t            }\n\t            return String.fromCharCode(code);\n\t        }\n\t        return ALPHA_INDEX[s] || s;\n\t    });\n\t};\n\t\n\t/**\n\t * @param {String} str\n\t * @returns {String}\n\t */\n\t XmlEntities.decode = function(str) {\n\t    return new XmlEntities().decode(str);\n\t };\n\t\n\t/**\n\t * @param {String} str\n\t * @returns {String}\n\t */\n\tXmlEntities.prototype.encodeNonUTF = function(str) {\n\t    var strLength = str.length;\n\t    if (strLength === 0) {\n\t        return '';\n\t    }\n\t    var result = '';\n\t    var i = 0;\n\t    while (i < strLength) {\n\t        var c = str.charCodeAt(i);\n\t        var alpha = CHAR_INDEX[c];\n\t        if (alpha) {\n\t            result += \"&\" + alpha + \";\";\n\t            i++;\n\t            continue;\n\t        }\n\t        if (c < 32 || c > 126) {\n\t            result += '&#' + c + ';';\n\t        } else {\n\t            result += str.charAt(i);\n\t        }\n\t        i++;\n\t    }\n\t    return result;\n\t};\n\t\n\t/**\n\t * @param {String} str\n\t * @returns {String}\n\t */\n\t XmlEntities.encodeNonUTF = function(str) {\n\t    return new XmlEntities().encodeNonUTF(str);\n\t };\n\t\n\t/**\n\t * @param {String} str\n\t * @returns {String}\n\t */\n\tXmlEntities.prototype.encodeNonASCII = function(str) {\n\t    var strLenght = str.length;\n\t    if (strLenght === 0) {\n\t        return '';\n\t    }\n\t    var result = '';\n\t    var i = 0;\n\t    while (i < strLenght) {\n\t        var c = str.charCodeAt(i);\n\t        if (c <= 255) {\n\t            result += str[i++];\n\t            continue;\n\t        }\n\t        result += '&#' + c + ';';\n\t        i++;\n\t    }\n\t    return result;\n\t};\n\t\n\t/**\n\t * @param {String} str\n\t * @returns {String}\n\t */\n\t XmlEntities.encodeNonASCII = function(str) {\n\t    return new XmlEntities().encodeNonASCII(str);\n\t };\n\t\n\tmodule.exports = XmlEntities;\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\tvar HTML_ALPHA = ['apos', 'nbsp', 'iexcl', 'cent', 'pound', 'curren', 'yen', 'brvbar', 'sect', 'uml', 'copy', 'ordf', 'laquo', 'not', 'shy', 'reg', 'macr', 'deg', 'plusmn', 'sup2', 'sup3', 'acute', 'micro', 'para', 'middot', 'cedil', 'sup1', 'ordm', 'raquo', 'frac14', 'frac12', 'frac34', 'iquest', 'Agrave', 'Aacute', 'Acirc', 'Atilde', 'Auml', 'Aring', 'Aelig', 'Ccedil', 'Egrave', 'Eacute', 'Ecirc', 'Euml', 'Igrave', 'Iacute', 'Icirc', 'Iuml', 'ETH', 'Ntilde', 'Ograve', 'Oacute', 'Ocirc', 'Otilde', 'Ouml', 'times', 'Oslash', 'Ugrave', 'Uacute', 'Ucirc', 'Uuml', 'Yacute', 'THORN', 'szlig', 'agrave', 'aacute', 'acirc', 'atilde', 'auml', 'aring', 'aelig', 'ccedil', 'egrave', 'eacute', 'ecirc', 'euml', 'igrave', 'iacute', 'icirc', 'iuml', 'eth', 'ntilde', 'ograve', 'oacute', 'ocirc', 'otilde', 'ouml', 'divide', 'Oslash', 'ugrave', 'uacute', 'ucirc', 'uuml', 'yacute', 'thorn', 'yuml', 'quot', 'amp', 'lt', 'gt', 'oelig', 'oelig', 'scaron', 'scaron', 'yuml', 'circ', 'tilde', 'ensp', 'emsp', 'thinsp', 'zwnj', 'zwj', 'lrm', 'rlm', 'ndash', 'mdash', 'lsquo', 'rsquo', 'sbquo', 'ldquo', 'rdquo', 'bdquo', 'dagger', 'dagger', 'permil', 'lsaquo', 'rsaquo', 'euro', 'fnof', 'alpha', 'beta', 'gamma', 'delta', 'epsilon', 'zeta', 'eta', 'theta', 'iota', 'kappa', 'lambda', 'mu', 'nu', 'xi', 'omicron', 'pi', 'rho', 'sigma', 'tau', 'upsilon', 'phi', 'chi', 'psi', 'omega', 'alpha', 'beta', 'gamma', 'delta', 'epsilon', 'zeta', 'eta', 'theta', 'iota', 'kappa', 'lambda', 'mu', 'nu', 'xi', 'omicron', 'pi', 'rho', 'sigmaf', 'sigma', 'tau', 'upsilon', 'phi', 'chi', 'psi', 'omega', 'thetasym', 'upsih', 'piv', 'bull', 'hellip', 'prime', 'prime', 'oline', 'frasl', 'weierp', 'image', 'real', 'trade', 'alefsym', 'larr', 'uarr', 'rarr', 'darr', 'harr', 'crarr', 'larr', 'uarr', 'rarr', 'darr', 'harr', 'forall', 'part', 'exist', 'empty', 'nabla', 'isin', 'notin', 'ni', 'prod', 'sum', 'minus', 'lowast', 'radic', 'prop', 'infin', 'ang', 'and', 'or', 'cap', 'cup', 'int', 'there4', 'sim', 'cong', 'asymp', 'ne', 'equiv', 'le', 'ge', 'sub', 'sup', 'nsub', 'sube', 'supe', 'oplus', 'otimes', 'perp', 'sdot', 'lceil', 'rceil', 'lfloor', 'rfloor', 'lang', 'rang', 'loz', 'spades', 'clubs', 'hearts', 'diams'];\n\tvar HTML_CODES = [39, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 34, 38, 60, 62, 338, 339, 352, 353, 376, 710, 732, 8194, 8195, 8201, 8204, 8205, 8206, 8207, 8211, 8212, 8216, 8217, 8218, 8220, 8221, 8222, 8224, 8225, 8240, 8249, 8250, 8364, 402, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 977, 978, 982, 8226, 8230, 8242, 8243, 8254, 8260, 8472, 8465, 8476, 8482, 8501, 8592, 8593, 8594, 8595, 8596, 8629, 8656, 8657, 8658, 8659, 8660, 8704, 8706, 8707, 8709, 8711, 8712, 8713, 8715, 8719, 8721, 8722, 8727, 8730, 8733, 8734, 8736, 8743, 8744, 8745, 8746, 8747, 8756, 8764, 8773, 8776, 8800, 8801, 8804, 8805, 8834, 8835, 8836, 8838, 8839, 8853, 8855, 8869, 8901, 8968, 8969, 8970, 8971, 9001, 9002, 9674, 9824, 9827, 9829, 9830];\n\t\n\tvar alphaIndex = {};\n\tvar numIndex = {};\n\t\n\tvar i = 0;\n\tvar length = HTML_ALPHA.length;\n\twhile (i < length) {\n\t    var a = HTML_ALPHA[i];\n\t    var c = HTML_CODES[i];\n\t    alphaIndex[a] = String.fromCharCode(c);\n\t    numIndex[c] = a;\n\t    i++;\n\t}\n\t\n\t/**\n\t * @constructor\n\t */\n\tfunction Html4Entities() {}\n\t\n\t/**\n\t * @param {String} str\n\t * @returns {String}\n\t */\n\tHtml4Entities.prototype.decode = function(str) {\n\t    if (str.length === 0) {\n\t        return '';\n\t    }\n\t    return str.replace(/&(#?[\\w\\d]+);?/g, function(s, entity) {\n\t        var chr;\n\t        if (entity.charAt(0) === \"#\") {\n\t            var code = entity.charAt(1).toLowerCase() === 'x' ?\n\t                parseInt(entity.substr(2), 16) :\n\t                parseInt(entity.substr(1));\n\t\n\t            if (!(isNaN(code) || code < -32768 || code > 65535)) {\n\t                chr = String.fromCharCode(code);\n\t            }\n\t        } else {\n\t            chr = alphaIndex[entity];\n\t        }\n\t        return chr || s;\n\t    });\n\t};\n\t\n\t/**\n\t * @param {String} str\n\t * @returns {String}\n\t */\n\tHtml4Entities.decode = function(str) {\n\t    return new Html4Entities().decode(str);\n\t};\n\t\n\t/**\n\t * @param {String} str\n\t * @returns {String}\n\t */\n\tHtml4Entities.prototype.encode = function(str) {\n\t    var strLength = str.length;\n\t    if (strLength === 0) {\n\t        return '';\n\t    }\n\t    var result = '';\n\t    var i = 0;\n\t    while (i < strLength) {\n\t        var alpha = numIndex[str.charCodeAt(i)];\n\t        result += alpha ? \"&\" + alpha + \";\" : str.charAt(i);\n\t        i++;\n\t    }\n\t    return result;\n\t};\n\t\n\t/**\n\t * @param {String} str\n\t * @returns {String}\n\t */\n\tHtml4Entities.encode = function(str) {\n\t    return new Html4Entities().encode(str);\n\t};\n\t\n\t/**\n\t * @param {String} str\n\t * @returns {String}\n\t */\n\tHtml4Entities.prototype.encodeNonUTF = function(str) {\n\t    var strLength = str.length;\n\t    if (strLength === 0) {\n\t        return '';\n\t    }\n\t    var result = '';\n\t    var i = 0;\n\t    while (i < strLength) {\n\t        var cc = str.charCodeAt(i);\n\t        var alpha = numIndex[cc];\n\t        if (alpha) {\n\t            result += \"&\" + alpha + \";\";\n\t        } else if (cc < 32 || cc > 126) {\n\t            result += \"&#\" + cc + \";\";\n\t        } else {\n\t            result += str.charAt(i);\n\t        }\n\t        i++;\n\t    }\n\t    return result;\n\t};\n\t\n\t/**\n\t * @param {String} str\n\t * @returns {String}\n\t */\n\tHtml4Entities.encodeNonUTF = function(str) {\n\t    return new Html4Entities().encodeNonUTF(str);\n\t};\n\t\n\t/**\n\t * @param {String} str\n\t * @returns {String}\n\t */\n\tHtml4Entities.prototype.encodeNonASCII = function(str) {\n\t    var strLength = str.length;\n\t    if (strLength === 0) {\n\t        return '';\n\t    }\n\t    var result = '';\n\t    var i = 0;\n\t    while (i < strLength) {\n\t        var c = str.charCodeAt(i);\n\t        if (c <= 255) {\n\t            result += str[i++];\n\t            continue;\n\t        }\n\t        result += '&#' + c + ';';\n\t        i++;\n\t    }\n\t    return result;\n\t};\n\t\n\t/**\n\t * @param {String} str\n\t * @returns {String}\n\t */\n\tHtml4Entities.encodeNonASCII = function(str) {\n\t    return new Html4Entities().encodeNonASCII(str);\n\t};\n\t\n\tmodule.exports = Html4Entities;\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\tvar ENTITIES = [['Aacute', [193]], ['aacute', [225]], ['Abreve', [258]], ['abreve', [259]], ['ac', [8766]], ['acd', [8767]], ['acE', [8766, 819]], ['Acirc', [194]], ['acirc', [226]], ['acute', [180]], ['Acy', [1040]], ['acy', [1072]], ['AElig', [198]], ['aelig', [230]], ['af', [8289]], ['Afr', [120068]], ['afr', [120094]], ['Agrave', [192]], ['agrave', [224]], ['alefsym', [8501]], ['aleph', [8501]], ['Alpha', [913]], ['alpha', [945]], ['Amacr', [256]], ['amacr', [257]], ['amalg', [10815]], ['amp', [38]], ['AMP', [38]], ['andand', [10837]], ['And', [10835]], ['and', [8743]], ['andd', [10844]], ['andslope', [10840]], ['andv', [10842]], ['ang', [8736]], ['ange', [10660]], ['angle', [8736]], ['angmsdaa', [10664]], ['angmsdab', [10665]], ['angmsdac', [10666]], ['angmsdad', [10667]], ['angmsdae', [10668]], ['angmsdaf', [10669]], ['angmsdag', [10670]], ['angmsdah', [10671]], ['angmsd', [8737]], ['angrt', [8735]], ['angrtvb', [8894]], ['angrtvbd', [10653]], ['angsph', [8738]], ['angst', [197]], ['angzarr', [9084]], ['Aogon', [260]], ['aogon', [261]], ['Aopf', [120120]], ['aopf', [120146]], ['apacir', [10863]], ['ap', [8776]], ['apE', [10864]], ['ape', [8778]], ['apid', [8779]], ['apos', [39]], ['ApplyFunction', [8289]], ['approx', [8776]], ['approxeq', [8778]], ['Aring', [197]], ['aring', [229]], ['Ascr', [119964]], ['ascr', [119990]], ['Assign', [8788]], ['ast', [42]], ['asymp', [8776]], ['asympeq', [8781]], ['Atilde', [195]], ['atilde', [227]], ['Auml', [196]], ['auml', [228]], ['awconint', [8755]], ['awint', [10769]], ['backcong', [8780]], ['backepsilon', [1014]], ['backprime', [8245]], ['backsim', [8765]], ['backsimeq', [8909]], ['Backslash', [8726]], ['Barv', [10983]], ['barvee', [8893]], ['barwed', [8965]], ['Barwed', [8966]], ['barwedge', [8965]], ['bbrk', [9141]], ['bbrktbrk', [9142]], ['bcong', [8780]], ['Bcy', [1041]], ['bcy', [1073]], ['bdquo', [8222]], ['becaus', [8757]], ['because', [8757]], ['Because', [8757]], ['bemptyv', [10672]], ['bepsi', [1014]], ['bernou', [8492]], ['Bernoullis', [8492]], ['Beta', [914]], ['beta', [946]], ['beth', [8502]], ['between', [8812]], ['Bfr', [120069]], ['bfr', [120095]], ['bigcap', [8898]], ['bigcirc', [9711]], ['bigcup', [8899]], ['bigodot', [10752]], ['bigoplus', [10753]], ['bigotimes', [10754]], ['bigsqcup', [10758]], ['bigstar', [9733]], ['bigtriangledown', [9661]], ['bigtriangleup', [9651]], ['biguplus', [10756]], ['bigvee', [8897]], ['bigwedge', [8896]], ['bkarow', [10509]], ['blacklozenge', [10731]], ['blacksquare', [9642]], ['blacktriangle', [9652]], ['blacktriangledown', [9662]], ['blacktriangleleft', [9666]], ['blacktriangleright', [9656]], ['blank', [9251]], ['blk12', [9618]], ['blk14', [9617]], ['blk34', [9619]], ['block', [9608]], ['bne', [61, 8421]], ['bnequiv', [8801, 8421]], ['bNot', [10989]], ['bnot', [8976]], ['Bopf', [120121]], ['bopf', [120147]], ['bot', [8869]], ['bottom', [8869]], ['bowtie', [8904]], ['boxbox', [10697]], ['boxdl', [9488]], ['boxdL', [9557]], ['boxDl', [9558]], ['boxDL', [9559]], ['boxdr', [9484]], ['boxdR', [9554]], ['boxDr', [9555]], ['boxDR', [9556]], ['boxh', [9472]], ['boxH', [9552]], ['boxhd', [9516]], ['boxHd', [9572]], ['boxhD', [9573]], ['boxHD', [9574]], ['boxhu', [9524]], ['boxHu', [9575]], ['boxhU', [9576]], ['boxHU', [9577]], ['boxminus', [8863]], ['boxplus', [8862]], ['boxtimes', [8864]], ['boxul', [9496]], ['boxuL', [9563]], ['boxUl', [9564]], ['boxUL', [9565]], ['boxur', [9492]], ['boxuR', [9560]], ['boxUr', [9561]], ['boxUR', [9562]], ['boxv', [9474]], ['boxV', [9553]], ['boxvh', [9532]], ['boxvH', [9578]], ['boxVh', [9579]], ['boxVH', [9580]], ['boxvl', [9508]], ['boxvL', [9569]], ['boxVl', [9570]], ['boxVL', [9571]], ['boxvr', [9500]], ['boxvR', [9566]], ['boxVr', [9567]], ['boxVR', [9568]], ['bprime', [8245]], ['breve', [728]], ['Breve', [728]], ['brvbar', [166]], ['bscr', [119991]], ['Bscr', [8492]], ['bsemi', [8271]], ['bsim', [8765]], ['bsime', [8909]], ['bsolb', [10693]], ['bsol', [92]], ['bsolhsub', [10184]], ['bull', [8226]], ['bullet', [8226]], ['bump', [8782]], ['bumpE', [10926]], ['bumpe', [8783]], ['Bumpeq', [8782]], ['bumpeq', [8783]], ['Cacute', [262]], ['cacute', [263]], ['capand', [10820]], ['capbrcup', [10825]], ['capcap', [10827]], ['cap', [8745]], ['Cap', [8914]], ['capcup', [10823]], ['capdot', [10816]], ['CapitalDifferentialD', [8517]], ['caps', [8745, 65024]], ['caret', [8257]], ['caron', [711]], ['Cayleys', [8493]], ['ccaps', [10829]], ['Ccaron', [268]], ['ccaron', [269]], ['Ccedil', [199]], ['ccedil', [231]], ['Ccirc', [264]], ['ccirc', [265]], ['Cconint', [8752]], ['ccups', [10828]], ['ccupssm', [10832]], ['Cdot', [266]], ['cdot', [267]], ['cedil', [184]], ['Cedilla', [184]], ['cemptyv', [10674]], ['cent', [162]], ['centerdot', [183]], ['CenterDot', [183]], ['cfr', [120096]], ['Cfr', [8493]], ['CHcy', [1063]], ['chcy', [1095]], ['check', [10003]], ['checkmark', [10003]], ['Chi', [935]], ['chi', [967]], ['circ', [710]], ['circeq', [8791]], ['circlearrowleft', [8634]], ['circlearrowright', [8635]], ['circledast', [8859]], ['circledcirc', [8858]], ['circleddash', [8861]], ['CircleDot', [8857]], ['circledR', [174]], ['circledS', [9416]], ['CircleMinus', [8854]], ['CirclePlus', [8853]], ['CircleTimes', [8855]], ['cir', [9675]], ['cirE', [10691]], ['cire', [8791]], ['cirfnint', [10768]], ['cirmid', [10991]], ['cirscir', [10690]], ['ClockwiseContourIntegral', [8754]], ['CloseCurlyDoubleQuote', [8221]], ['CloseCurlyQuote', [8217]], ['clubs', [9827]], ['clubsuit', [9827]], ['colon', [58]], ['Colon', [8759]], ['Colone', [10868]], ['colone', [8788]], ['coloneq', [8788]], ['comma', [44]], ['commat', [64]], ['comp', [8705]], ['compfn', [8728]], ['complement', [8705]], ['complexes', [8450]], ['cong', [8773]], ['congdot', [10861]], ['Congruent', [8801]], ['conint', [8750]], ['Conint', [8751]], ['ContourIntegral', [8750]], ['copf', [120148]], ['Copf', [8450]], ['coprod', [8720]], ['Coproduct', [8720]], ['copy', [169]], ['COPY', [169]], ['copysr', [8471]], ['CounterClockwiseContourIntegral', [8755]], ['crarr', [8629]], ['cross', [10007]], ['Cross', [10799]], ['Cscr', [119966]], ['cscr', [119992]], ['csub', [10959]], ['csube', [10961]], ['csup', [10960]], ['csupe', [10962]], ['ctdot', [8943]], ['cudarrl', [10552]], ['cudarrr', [10549]], ['cuepr', [8926]], ['cuesc', [8927]], ['cularr', [8630]], ['cularrp', [10557]], ['cupbrcap', [10824]], ['cupcap', [10822]], ['CupCap', [8781]], ['cup', [8746]], ['Cup', [8915]], ['cupcup', [10826]], ['cupdot', [8845]], ['cupor', [10821]], ['cups', [8746, 65024]], ['curarr', [8631]], ['curarrm', [10556]], ['curlyeqprec', [8926]], ['curlyeqsucc', [8927]], ['curlyvee', [8910]], ['curlywedge', [8911]], ['curren', [164]], ['curvearrowleft', [8630]], ['curvearrowright', [8631]], ['cuvee', [8910]], ['cuwed', [8911]], ['cwconint', [8754]], ['cwint', [8753]], ['cylcty', [9005]], ['dagger', [8224]], ['Dagger', [8225]], ['daleth', [8504]], ['darr', [8595]], ['Darr', [8609]], ['dArr', [8659]], ['dash', [8208]], ['Dashv', [10980]], ['dashv', [8867]], ['dbkarow', [10511]], ['dblac', [733]], ['Dcaron', [270]], ['dcaron', [271]], ['Dcy', [1044]], ['dcy', [1076]], ['ddagger', [8225]], ['ddarr', [8650]], ['DD', [8517]], ['dd', [8518]], ['DDotrahd', [10513]], ['ddotseq', [10871]], ['deg', [176]], ['Del', [8711]], ['Delta', [916]], ['delta', [948]], ['demptyv', [10673]], ['dfisht', [10623]], ['Dfr', [120071]], ['dfr', [120097]], ['dHar', [10597]], ['dharl', [8643]], ['dharr', [8642]], ['DiacriticalAcute', [180]], ['DiacriticalDot', [729]], ['DiacriticalDoubleAcute', [733]], ['DiacriticalGrave', [96]], ['DiacriticalTilde', [732]], ['diam', [8900]], ['diamond', [8900]], ['Diamond', [8900]], ['diamondsuit', [9830]], ['diams', [9830]], ['die', [168]], ['DifferentialD', [8518]], ['digamma', [989]], ['disin', [8946]], ['div', [247]], ['divide', [247]], ['divideontimes', [8903]], ['divonx', [8903]], ['DJcy', [1026]], ['djcy', [1106]], ['dlcorn', [8990]], ['dlcrop', [8973]], ['dollar', [36]], ['Dopf', [120123]], ['dopf', [120149]], ['Dot', [168]], ['dot', [729]], ['DotDot', [8412]], ['doteq', [8784]], ['doteqdot', [8785]], ['DotEqual', [8784]], ['dotminus', [8760]], ['dotplus', [8724]], ['dotsquare', [8865]], ['doublebarwedge', [8966]], ['DoubleContourIntegral', [8751]], ['DoubleDot', [168]], ['DoubleDownArrow', [8659]], ['DoubleLeftArrow', [8656]], ['DoubleLeftRightArrow', [8660]], ['DoubleLeftTee', [10980]], ['DoubleLongLeftArrow', [10232]], ['DoubleLongLeftRightArrow', [10234]], ['DoubleLongRightArrow', [10233]], ['DoubleRightArrow', [8658]], ['DoubleRightTee', [8872]], ['DoubleUpArrow', [8657]], ['DoubleUpDownArrow', [8661]], ['DoubleVerticalBar', [8741]], ['DownArrowBar', [10515]], ['downarrow', [8595]], ['DownArrow', [8595]], ['Downarrow', [8659]], ['DownArrowUpArrow', [8693]], ['DownBreve', [785]], ['downdownarrows', [8650]], ['downharpoonleft', [8643]], ['downharpoonright', [8642]], ['DownLeftRightVector', [10576]], ['DownLeftTeeVector', [10590]], ['DownLeftVectorBar', [10582]], ['DownLeftVector', [8637]], ['DownRightTeeVector', [10591]], ['DownRightVectorBar', [10583]], ['DownRightVector', [8641]], ['DownTeeArrow', [8615]], ['DownTee', [8868]], ['drbkarow', [10512]], ['drcorn', [8991]], ['drcrop', [8972]], ['Dscr', [119967]], ['dscr', [119993]], ['DScy', [1029]], ['dscy', [1109]], ['dsol', [10742]], ['Dstrok', [272]], ['dstrok', [273]], ['dtdot', [8945]], ['dtri', [9663]], ['dtrif', [9662]], ['duarr', [8693]], ['duhar', [10607]], ['dwangle', [10662]], ['DZcy', [1039]], ['dzcy', [1119]], ['dzigrarr', [10239]], ['Eacute', [201]], ['eacute', [233]], ['easter', [10862]], ['Ecaron', [282]], ['ecaron', [283]], ['Ecirc', [202]], ['ecirc', [234]], ['ecir', [8790]], ['ecolon', [8789]], ['Ecy', [1069]], ['ecy', [1101]], ['eDDot', [10871]], ['Edot', [278]], ['edot', [279]], ['eDot', [8785]], ['ee', [8519]], ['efDot', [8786]], ['Efr', [120072]], ['efr', [120098]], ['eg', [10906]], ['Egrave', [200]], ['egrave', [232]], ['egs', [10902]], ['egsdot', [10904]], ['el', [10905]], ['Element', [8712]], ['elinters', [9191]], ['ell', [8467]], ['els', [10901]], ['elsdot', [10903]], ['Emacr', [274]], ['emacr', [275]], ['empty', [8709]], ['emptyset', [8709]], ['EmptySmallSquare', [9723]], ['emptyv', [8709]], ['EmptyVerySmallSquare', [9643]], ['emsp13', [8196]], ['emsp14', [8197]], ['emsp', [8195]], ['ENG', [330]], ['eng', [331]], ['ensp', [8194]], ['Eogon', [280]], ['eogon', [281]], ['Eopf', [120124]], ['eopf', [120150]], ['epar', [8917]], ['eparsl', [10723]], ['eplus', [10865]], ['epsi', [949]], ['Epsilon', [917]], ['epsilon', [949]], ['epsiv', [1013]], ['eqcirc', [8790]], ['eqcolon', [8789]], ['eqsim', [8770]], ['eqslantgtr', [10902]], ['eqslantless', [10901]], ['Equal', [10869]], ['equals', [61]], ['EqualTilde', [8770]], ['equest', [8799]], ['Equilibrium', [8652]], ['equiv', [8801]], ['equivDD', [10872]], ['eqvparsl', [10725]], ['erarr', [10609]], ['erDot', [8787]], ['escr', [8495]], ['Escr', [8496]], ['esdot', [8784]], ['Esim', [10867]], ['esim', [8770]], ['Eta', [919]], ['eta', [951]], ['ETH', [208]], ['eth', [240]], ['Euml', [203]], ['euml', [235]], ['euro', [8364]], ['excl', [33]], ['exist', [8707]], ['Exists', [8707]], ['expectation', [8496]], ['exponentiale', [8519]], ['ExponentialE', [8519]], ['fallingdotseq', [8786]], ['Fcy', [1060]], ['fcy', [1092]], ['female', [9792]], ['ffilig', [64259]], ['fflig', [64256]], ['ffllig', [64260]], ['Ffr', [120073]], ['ffr', [120099]], ['filig', [64257]], ['FilledSmallSquare', [9724]], ['FilledVerySmallSquare', [9642]], ['fjlig', [102, 106]], ['flat', [9837]], ['fllig', [64258]], ['fltns', [9649]], ['fnof', [402]], ['Fopf', [120125]], ['fopf', [120151]], ['forall', [8704]], ['ForAll', [8704]], ['fork', [8916]], ['forkv', [10969]], ['Fouriertrf', [8497]], ['fpartint', [10765]], ['frac12', [189]], ['frac13', [8531]], ['frac14', [188]], ['frac15', [8533]], ['frac16', [8537]], ['frac18', [8539]], ['frac23', [8532]], ['frac25', [8534]], ['frac34', [190]], ['frac35', [8535]], ['frac38', [8540]], ['frac45', [8536]], ['frac56', [8538]], ['frac58', [8541]], ['frac78', [8542]], ['frasl', [8260]], ['frown', [8994]], ['fscr', [119995]], ['Fscr', [8497]], ['gacute', [501]], ['Gamma', [915]], ['gamma', [947]], ['Gammad', [988]], ['gammad', [989]], ['gap', [10886]], ['Gbreve', [286]], ['gbreve', [287]], ['Gcedil', [290]], ['Gcirc', [284]], ['gcirc', [285]], ['Gcy', [1043]], ['gcy', [1075]], ['Gdot', [288]], ['gdot', [289]], ['ge', [8805]], ['gE', [8807]], ['gEl', [10892]], ['gel', [8923]], ['geq', [8805]], ['geqq', [8807]], ['geqslant', [10878]], ['gescc', [10921]], ['ges', [10878]], ['gesdot', [10880]], ['gesdoto', [10882]], ['gesdotol', [10884]], ['gesl', [8923, 65024]], ['gesles', [10900]], ['Gfr', [120074]], ['gfr', [120100]], ['gg', [8811]], ['Gg', [8921]], ['ggg', [8921]], ['gimel', [8503]], ['GJcy', [1027]], ['gjcy', [1107]], ['gla', [10917]], ['gl', [8823]], ['glE', [10898]], ['glj', [10916]], ['gnap', [10890]], ['gnapprox', [10890]], ['gne', [10888]], ['gnE', [8809]], ['gneq', [10888]], ['gneqq', [8809]], ['gnsim', [8935]], ['Gopf', [120126]], ['gopf', [120152]], ['grave', [96]], ['GreaterEqual', [8805]], ['GreaterEqualLess', [8923]], ['GreaterFullEqual', [8807]], ['GreaterGreater', [10914]], ['GreaterLess', [8823]], ['GreaterSlantEqual', [10878]], ['GreaterTilde', [8819]], ['Gscr', [119970]], ['gscr', [8458]], ['gsim', [8819]], ['gsime', [10894]], ['gsiml', [10896]], ['gtcc', [10919]], ['gtcir', [10874]], ['gt', [62]], ['GT', [62]], ['Gt', [8811]], ['gtdot', [8919]], ['gtlPar', [10645]], ['gtquest', [10876]], ['gtrapprox', [10886]], ['gtrarr', [10616]], ['gtrdot', [8919]], ['gtreqless', [8923]], ['gtreqqless', [10892]], ['gtrless', [8823]], ['gtrsim', [8819]], ['gvertneqq', [8809, 65024]], ['gvnE', [8809, 65024]], ['Hacek', [711]], ['hairsp', [8202]], ['half', [189]], ['hamilt', [8459]], ['HARDcy', [1066]], ['hardcy', [1098]], ['harrcir', [10568]], ['harr', [8596]], ['hArr', [8660]], ['harrw', [8621]], ['Hat', [94]], ['hbar', [8463]], ['Hcirc', [292]], ['hcirc', [293]], ['hearts', [9829]], ['heartsuit', [9829]], ['hellip', [8230]], ['hercon', [8889]], ['hfr', [120101]], ['Hfr', [8460]], ['HilbertSpace', [8459]], ['hksearow', [10533]], ['hkswarow', [10534]], ['hoarr', [8703]], ['homtht', [8763]], ['hookleftarrow', [8617]], ['hookrightarrow', [8618]], ['hopf', [120153]], ['Hopf', [8461]], ['horbar', [8213]], ['HorizontalLine', [9472]], ['hscr', [119997]], ['Hscr', [8459]], ['hslash', [8463]], ['Hstrok', [294]], ['hstrok', [295]], ['HumpDownHump', [8782]], ['HumpEqual', [8783]], ['hybull', [8259]], ['hyphen', [8208]], ['Iacute', [205]], ['iacute', [237]], ['ic', [8291]], ['Icirc', [206]], ['icirc', [238]], ['Icy', [1048]], ['icy', [1080]], ['Idot', [304]], ['IEcy', [1045]], ['iecy', [1077]], ['iexcl', [161]], ['iff', [8660]], ['ifr', [120102]], ['Ifr', [8465]], ['Igrave', [204]], ['igrave', [236]], ['ii', [8520]], ['iiiint', [10764]], ['iiint', [8749]], ['iinfin', [10716]], ['iiota', [8489]], ['IJlig', [306]], ['ijlig', [307]], ['Imacr', [298]], ['imacr', [299]], ['image', [8465]], ['ImaginaryI', [8520]], ['imagline', [8464]], ['imagpart', [8465]], ['imath', [305]], ['Im', [8465]], ['imof', [8887]], ['imped', [437]], ['Implies', [8658]], ['incare', [8453]], ['in', [8712]], ['infin', [8734]], ['infintie', [10717]], ['inodot', [305]], ['intcal', [8890]], ['int', [8747]], ['Int', [8748]], ['integers', [8484]], ['Integral', [8747]], ['intercal', [8890]], ['Intersection', [8898]], ['intlarhk', [10775]], ['intprod', [10812]], ['InvisibleComma', [8291]], ['InvisibleTimes', [8290]], ['IOcy', [1025]], ['iocy', [1105]], ['Iogon', [302]], ['iogon', [303]], ['Iopf', [120128]], ['iopf', [120154]], ['Iota', [921]], ['iota', [953]], ['iprod', [10812]], ['iquest', [191]], ['iscr', [119998]], ['Iscr', [8464]], ['isin', [8712]], ['isindot', [8949]], ['isinE', [8953]], ['isins', [8948]], ['isinsv', [8947]], ['isinv', [8712]], ['it', [8290]], ['Itilde', [296]], ['itilde', [297]], ['Iukcy', [1030]], ['iukcy', [1110]], ['Iuml', [207]], ['iuml', [239]], ['Jcirc', [308]], ['jcirc', [309]], ['Jcy', [1049]], ['jcy', [1081]], ['Jfr', [120077]], ['jfr', [120103]], ['jmath', [567]], ['Jopf', [120129]], ['jopf', [120155]], ['Jscr', [119973]], ['jscr', [119999]], ['Jsercy', [1032]], ['jsercy', [1112]], ['Jukcy', [1028]], ['jukcy', [1108]], ['Kappa', [922]], ['kappa', [954]], ['kappav', [1008]], ['Kcedil', [310]], ['kcedil', [311]], ['Kcy', [1050]], ['kcy', [1082]], ['Kfr', [120078]], ['kfr', [120104]], ['kgreen', [312]], ['KHcy', [1061]], ['khcy', [1093]], ['KJcy', [1036]], ['kjcy', [1116]], ['Kopf', [120130]], ['kopf', [120156]], ['Kscr', [119974]], ['kscr', [120000]], ['lAarr', [8666]], ['Lacute', [313]], ['lacute', [314]], ['laemptyv', [10676]], ['lagran', [8466]], ['Lambda', [923]], ['lambda', [955]], ['lang', [10216]], ['Lang', [10218]], ['langd', [10641]], ['langle', [10216]], ['lap', [10885]], ['Laplacetrf', [8466]], ['laquo', [171]], ['larrb', [8676]], ['larrbfs', [10527]], ['larr', [8592]], ['Larr', [8606]], ['lArr', [8656]], ['larrfs', [10525]], ['larrhk', [8617]], ['larrlp', [8619]], ['larrpl', [10553]], ['larrsim', [10611]], ['larrtl', [8610]], ['latail', [10521]], ['lAtail', [10523]], ['lat', [10923]], ['late', [10925]], ['lates', [10925, 65024]], ['lbarr', [10508]], ['lBarr', [10510]], ['lbbrk', [10098]], ['lbrace', [123]], ['lbrack', [91]], ['lbrke', [10635]], ['lbrksld', [10639]], ['lbrkslu', [10637]], ['Lcaron', [317]], ['lcaron', [318]], ['Lcedil', [315]], ['lcedil', [316]], ['lceil', [8968]], ['lcub', [123]], ['Lcy', [1051]], ['lcy', [1083]], ['ldca', [10550]], ['ldquo', [8220]], ['ldquor', [8222]], ['ldrdhar', [10599]], ['ldrushar', [10571]], ['ldsh', [8626]], ['le', [8804]], ['lE', [8806]], ['LeftAngleBracket', [10216]], ['LeftArrowBar', [8676]], ['leftarrow', [8592]], ['LeftArrow', [8592]], ['Leftarrow', [8656]], ['LeftArrowRightArrow', [8646]], ['leftarrowtail', [8610]], ['LeftCeiling', [8968]], ['LeftDoubleBracket', [10214]], ['LeftDownTeeVector', [10593]], ['LeftDownVectorBar', [10585]], ['LeftDownVector', [8643]], ['LeftFloor', [8970]], ['leftharpoondown', [8637]], ['leftharpoonup', [8636]], ['leftleftarrows', [8647]], ['leftrightarrow', [8596]], ['LeftRightArrow', [8596]], ['Leftrightarrow', [8660]], ['leftrightarrows', [8646]], ['leftrightharpoons', [8651]], ['leftrightsquigarrow', [8621]], ['LeftRightVector', [10574]], ['LeftTeeArrow', [8612]], ['LeftTee', [8867]], ['LeftTeeVector', [10586]], ['leftthreetimes', [8907]], ['LeftTriangleBar', [10703]], ['LeftTriangle', [8882]], ['LeftTriangleEqual', [8884]], ['LeftUpDownVector', [10577]], ['LeftUpTeeVector', [10592]], ['LeftUpVectorBar', [10584]], ['LeftUpVector', [8639]], ['LeftVectorBar', [10578]], ['LeftVector', [8636]], ['lEg', [10891]], ['leg', [8922]], ['leq', [8804]], ['leqq', [8806]], ['leqslant', [10877]], ['lescc', [10920]], ['les', [10877]], ['lesdot', [10879]], ['lesdoto', [10881]], ['lesdotor', [10883]], ['lesg', [8922, 65024]], ['lesges', [10899]], ['lessapprox', [10885]], ['lessdot', [8918]], ['lesseqgtr', [8922]], ['lesseqqgtr', [10891]], ['LessEqualGreater', [8922]], ['LessFullEqual', [8806]], ['LessGreater', [8822]], ['lessgtr', [8822]], ['LessLess', [10913]], ['lesssim', [8818]], ['LessSlantEqual', [10877]], ['LessTilde', [8818]], ['lfisht', [10620]], ['lfloor', [8970]], ['Lfr', [120079]], ['lfr', [120105]], ['lg', [8822]], ['lgE', [10897]], ['lHar', [10594]], ['lhard', [8637]], ['lharu', [8636]], ['lharul', [10602]], ['lhblk', [9604]], ['LJcy', [1033]], ['ljcy', [1113]], ['llarr', [8647]], ['ll', [8810]], ['Ll', [8920]], ['llcorner', [8990]], ['Lleftarrow', [8666]], ['llhard', [10603]], ['lltri', [9722]], ['Lmidot', [319]], ['lmidot', [320]], ['lmoustache', [9136]], ['lmoust', [9136]], ['lnap', [10889]], ['lnapprox', [10889]], ['lne', [10887]], ['lnE', [8808]], ['lneq', [10887]], ['lneqq', [8808]], ['lnsim', [8934]], ['loang', [10220]], ['loarr', [8701]], ['lobrk', [10214]], ['longleftarrow', [10229]], ['LongLeftArrow', [10229]], ['Longleftarrow', [10232]], ['longleftrightarrow', [10231]], ['LongLeftRightArrow', [10231]], ['Longleftrightarrow', [10234]], ['longmapsto', [10236]], ['longrightarrow', [10230]], ['LongRightArrow', [10230]], ['Longrightarrow', [10233]], ['looparrowleft', [8619]], ['looparrowright', [8620]], ['lopar', [10629]], ['Lopf', [120131]], ['lopf', [120157]], ['loplus', [10797]], ['lotimes', [10804]], ['lowast', [8727]], ['lowbar', [95]], ['LowerLeftArrow', [8601]], ['LowerRightArrow', [8600]], ['loz', [9674]], ['lozenge', [9674]], ['lozf', [10731]], ['lpar', [40]], ['lparlt', [10643]], ['lrarr', [8646]], ['lrcorner', [8991]], ['lrhar', [8651]], ['lrhard', [10605]], ['lrm', [8206]], ['lrtri', [8895]], ['lsaquo', [8249]], ['lscr', [120001]], ['Lscr', [8466]], ['lsh', [8624]], ['Lsh', [8624]], ['lsim', [8818]], ['lsime', [10893]], ['lsimg', [10895]], ['lsqb', [91]], ['lsquo', [8216]], ['lsquor', [8218]], ['Lstrok', [321]], ['lstrok', [322]], ['ltcc', [10918]], ['ltcir', [10873]], ['lt', [60]], ['LT', [60]], ['Lt', [8810]], ['ltdot', [8918]], ['lthree', [8907]], ['ltimes', [8905]], ['ltlarr', [10614]], ['ltquest', [10875]], ['ltri', [9667]], ['ltrie', [8884]], ['ltrif', [9666]], ['ltrPar', [10646]], ['lurdshar', [10570]], ['luruhar', [10598]], ['lvertneqq', [8808, 65024]], ['lvnE', [8808, 65024]], ['macr', [175]], ['male', [9794]], ['malt', [10016]], ['maltese', [10016]], ['Map', [10501]], ['map', [8614]], ['mapsto', [8614]], ['mapstodown', [8615]], ['mapstoleft', [8612]], ['mapstoup', [8613]], ['marker', [9646]], ['mcomma', [10793]], ['Mcy', [1052]], ['mcy', [1084]], ['mdash', [8212]], ['mDDot', [8762]], ['measuredangle', [8737]], ['MediumSpace', [8287]], ['Mellintrf', [8499]], ['Mfr', [120080]], ['mfr', [120106]], ['mho', [8487]], ['micro', [181]], ['midast', [42]], ['midcir', [10992]], ['mid', [8739]], ['middot', [183]], ['minusb', [8863]], ['minus', [8722]], ['minusd', [8760]], ['minusdu', [10794]], ['MinusPlus', [8723]], ['mlcp', [10971]], ['mldr', [8230]], ['mnplus', [8723]], ['models', [8871]], ['Mopf', [120132]], ['mopf', [120158]], ['mp', [8723]], ['mscr', [120002]], ['Mscr', [8499]], ['mstpos', [8766]], ['Mu', [924]], ['mu', [956]], ['multimap', [8888]], ['mumap', [8888]], ['nabla', [8711]], ['Nacute', [323]], ['nacute', [324]], ['nang', [8736, 8402]], ['nap', [8777]], ['napE', [10864, 824]], ['napid', [8779, 824]], ['napos', [329]], ['napprox', [8777]], ['natural', [9838]], ['naturals', [8469]], ['natur', [9838]], ['nbsp', [160]], ['nbump', [8782, 824]], ['nbumpe', [8783, 824]], ['ncap', [10819]], ['Ncaron', [327]], ['ncaron', [328]], ['Ncedil', [325]], ['ncedil', [326]], ['ncong', [8775]], ['ncongdot', [10861, 824]], ['ncup', [10818]], ['Ncy', [1053]], ['ncy', [1085]], ['ndash', [8211]], ['nearhk', [10532]], ['nearr', [8599]], ['neArr', [8663]], ['nearrow', [8599]], ['ne', [8800]], ['nedot', [8784, 824]], ['NegativeMediumSpace', [8203]], ['NegativeThickSpace', [8203]], ['NegativeThinSpace', [8203]], ['NegativeVeryThinSpace', [8203]], ['nequiv', [8802]], ['nesear', [10536]], ['nesim', [8770, 824]], ['NestedGreaterGreater', [8811]], ['NestedLessLess', [8810]], ['nexist', [8708]], ['nexists', [8708]], ['Nfr', [120081]], ['nfr', [120107]], ['ngE', [8807, 824]], ['nge', [8817]], ['ngeq', [8817]], ['ngeqq', [8807, 824]], ['ngeqslant', [10878, 824]], ['nges', [10878, 824]], ['nGg', [8921, 824]], ['ngsim', [8821]], ['nGt', [8811, 8402]], ['ngt', [8815]], ['ngtr', [8815]], ['nGtv', [8811, 824]], ['nharr', [8622]], ['nhArr', [8654]], ['nhpar', [10994]], ['ni', [8715]], ['nis', [8956]], ['nisd', [8954]], ['niv', [8715]], ['NJcy', [1034]], ['njcy', [1114]], ['nlarr', [8602]], ['nlArr', [8653]], ['nldr', [8229]], ['nlE', [8806, 824]], ['nle', [8816]], ['nleftarrow', [8602]], ['nLeftarrow', [8653]], ['nleftrightarrow', [8622]], ['nLeftrightarrow', [8654]], ['nleq', [8816]], ['nleqq', [8806, 824]], ['nleqslant', [10877, 824]], ['nles', [10877, 824]], ['nless', [8814]], ['nLl', [8920, 824]], ['nlsim', [8820]], ['nLt', [8810, 8402]], ['nlt', [8814]], ['nltri', [8938]], ['nltrie', [8940]], ['nLtv', [8810, 824]], ['nmid', [8740]], ['NoBreak', [8288]], ['NonBreakingSpace', [160]], ['nopf', [120159]], ['Nopf', [8469]], ['Not', [10988]], ['not', [172]], ['NotCongruent', [8802]], ['NotCupCap', [8813]], ['NotDoubleVerticalBar', [8742]], ['NotElement', [8713]], ['NotEqual', [8800]], ['NotEqualTilde', [8770, 824]], ['NotExists', [8708]], ['NotGreater', [8815]], ['NotGreaterEqual', [8817]], ['NotGreaterFullEqual', [8807, 824]], ['NotGreaterGreater', [8811, 824]], ['NotGreaterLess', [8825]], ['NotGreaterSlantEqual', [10878, 824]], ['NotGreaterTilde', [8821]], ['NotHumpDownHump', [8782, 824]], ['NotHumpEqual', [8783, 824]], ['notin', [8713]], ['notindot', [8949, 824]], ['notinE', [8953, 824]], ['notinva', [8713]], ['notinvb', [8951]], ['notinvc', [8950]], ['NotLeftTriangleBar', [10703, 824]], ['NotLeftTriangle', [8938]], ['NotLeftTriangleEqual', [8940]], ['NotLess', [8814]], ['NotLessEqual', [8816]], ['NotLessGreater', [8824]], ['NotLessLess', [8810, 824]], ['NotLessSlantEqual', [10877, 824]], ['NotLessTilde', [8820]], ['NotNestedGreaterGreater', [10914, 824]], ['NotNestedLessLess', [10913, 824]], ['notni', [8716]], ['notniva', [8716]], ['notnivb', [8958]], ['notnivc', [8957]], ['NotPrecedes', [8832]], ['NotPrecedesEqual', [10927, 824]], ['NotPrecedesSlantEqual', [8928]], ['NotReverseElement', [8716]], ['NotRightTriangleBar', [10704, 824]], ['NotRightTriangle', [8939]], ['NotRightTriangleEqual', [8941]], ['NotSquareSubset', [8847, 824]], ['NotSquareSubsetEqual', [8930]], ['NotSquareSuperset', [8848, 824]], ['NotSquareSupersetEqual', [8931]], ['NotSubset', [8834, 8402]], ['NotSubsetEqual', [8840]], ['NotSucceeds', [8833]], ['NotSucceedsEqual', [10928, 824]], ['NotSucceedsSlantEqual', [8929]], ['NotSucceedsTilde', [8831, 824]], ['NotSuperset', [8835, 8402]], ['NotSupersetEqual', [8841]], ['NotTilde', [8769]], ['NotTildeEqual', [8772]], ['NotTildeFullEqual', [8775]], ['NotTildeTilde', [8777]], ['NotVerticalBar', [8740]], ['nparallel', [8742]], ['npar', [8742]], ['nparsl', [11005, 8421]], ['npart', [8706, 824]], ['npolint', [10772]], ['npr', [8832]], ['nprcue', [8928]], ['nprec', [8832]], ['npreceq', [10927, 824]], ['npre', [10927, 824]], ['nrarrc', [10547, 824]], ['nrarr', [8603]], ['nrArr', [8655]], ['nrarrw', [8605, 824]], ['nrightarrow', [8603]], ['nRightarrow', [8655]], ['nrtri', [8939]], ['nrtrie', [8941]], ['nsc', [8833]], ['nsccue', [8929]], ['nsce', [10928, 824]], ['Nscr', [119977]], ['nscr', [120003]], ['nshortmid', [8740]], ['nshortparallel', [8742]], ['nsim', [8769]], ['nsime', [8772]], ['nsimeq', [8772]], ['nsmid', [8740]], ['nspar', [8742]], ['nsqsube', [8930]], ['nsqsupe', [8931]], ['nsub', [8836]], ['nsubE', [10949, 824]], ['nsube', [8840]], ['nsubset', [8834, 8402]], ['nsubseteq', [8840]], ['nsubseteqq', [10949, 824]], ['nsucc', [8833]], ['nsucceq', [10928, 824]], ['nsup', [8837]], ['nsupE', [10950, 824]], ['nsupe', [8841]], ['nsupset', [8835, 8402]], ['nsupseteq', [8841]], ['nsupseteqq', [10950, 824]], ['ntgl', [8825]], ['Ntilde', [209]], ['ntilde', [241]], ['ntlg', [8824]], ['ntriangleleft', [8938]], ['ntrianglelefteq', [8940]], ['ntriangleright', [8939]], ['ntrianglerighteq', [8941]], ['Nu', [925]], ['nu', [957]], ['num', [35]], ['numero', [8470]], ['numsp', [8199]], ['nvap', [8781, 8402]], ['nvdash', [8876]], ['nvDash', [8877]], ['nVdash', [8878]], ['nVDash', [8879]], ['nvge', [8805, 8402]], ['nvgt', [62, 8402]], ['nvHarr', [10500]], ['nvinfin', [10718]], ['nvlArr', [10498]], ['nvle', [8804, 8402]], ['nvlt', [60, 8402]], ['nvltrie', [8884, 8402]], ['nvrArr', [10499]], ['nvrtrie', [8885, 8402]], ['nvsim', [8764, 8402]], ['nwarhk', [10531]], ['nwarr', [8598]], ['nwArr', [8662]], ['nwarrow', [8598]], ['nwnear', [10535]], ['Oacute', [211]], ['oacute', [243]], ['oast', [8859]], ['Ocirc', [212]], ['ocirc', [244]], ['ocir', [8858]], ['Ocy', [1054]], ['ocy', [1086]], ['odash', [8861]], ['Odblac', [336]], ['odblac', [337]], ['odiv', [10808]], ['odot', [8857]], ['odsold', [10684]], ['OElig', [338]], ['oelig', [339]], ['ofcir', [10687]], ['Ofr', [120082]], ['ofr', [120108]], ['ogon', [731]], ['Ograve', [210]], ['ograve', [242]], ['ogt', [10689]], ['ohbar', [10677]], ['ohm', [937]], ['oint', [8750]], ['olarr', [8634]], ['olcir', [10686]], ['olcross', [10683]], ['oline', [8254]], ['olt', [10688]], ['Omacr', [332]], ['omacr', [333]], ['Omega', [937]], ['omega', [969]], ['Omicron', [927]], ['omicron', [959]], ['omid', [10678]], ['ominus', [8854]], ['Oopf', [120134]], ['oopf', [120160]], ['opar', [10679]], ['OpenCurlyDoubleQuote', [8220]], ['OpenCurlyQuote', [8216]], ['operp', [10681]], ['oplus', [8853]], ['orarr', [8635]], ['Or', [10836]], ['or', [8744]], ['ord', [10845]], ['order', [8500]], ['orderof', [8500]], ['ordf', [170]], ['ordm', [186]], ['origof', [8886]], ['oror', [10838]], ['orslope', [10839]], ['orv', [10843]], ['oS', [9416]], ['Oscr', [119978]], ['oscr', [8500]], ['Oslash', [216]], ['oslash', [248]], ['osol', [8856]], ['Otilde', [213]], ['otilde', [245]], ['otimesas', [10806]], ['Otimes', [10807]], ['otimes', [8855]], ['Ouml', [214]], ['ouml', [246]], ['ovbar', [9021]], ['OverBar', [8254]], ['OverBrace', [9182]], ['OverBracket', [9140]], ['OverParenthesis', [9180]], ['para', [182]], ['parallel', [8741]], ['par', [8741]], ['parsim', [10995]], ['parsl', [11005]], ['part', [8706]], ['PartialD', [8706]], ['Pcy', [1055]], ['pcy', [1087]], ['percnt', [37]], ['period', [46]], ['permil', [8240]], ['perp', [8869]], ['pertenk', [8241]], ['Pfr', [120083]], ['pfr', [120109]], ['Phi', [934]], ['phi', [966]], ['phiv', [981]], ['phmmat', [8499]], ['phone', [9742]], ['Pi', [928]], ['pi', [960]], ['pitchfork', [8916]], ['piv', [982]], ['planck', [8463]], ['planckh', [8462]], ['plankv', [8463]], ['plusacir', [10787]], ['plusb', [8862]], ['pluscir', [10786]], ['plus', [43]], ['plusdo', [8724]], ['plusdu', [10789]], ['pluse', [10866]], ['PlusMinus', [177]], ['plusmn', [177]], ['plussim', [10790]], ['plustwo', [10791]], ['pm', [177]], ['Poincareplane', [8460]], ['pointint', [10773]], ['popf', [120161]], ['Popf', [8473]], ['pound', [163]], ['prap', [10935]], ['Pr', [10939]], ['pr', [8826]], ['prcue', [8828]], ['precapprox', [10935]], ['prec', [8826]], ['preccurlyeq', [8828]], ['Precedes', [8826]], ['PrecedesEqual', [10927]], ['PrecedesSlantEqual', [8828]], ['PrecedesTilde', [8830]], ['preceq', [10927]], ['precnapprox', [10937]], ['precneqq', [10933]], ['precnsim', [8936]], ['pre', [10927]], ['prE', [10931]], ['precsim', [8830]], ['prime', [8242]], ['Prime', [8243]], ['primes', [8473]], ['prnap', [10937]], ['prnE', [10933]], ['prnsim', [8936]], ['prod', [8719]], ['Product', [8719]], ['profalar', [9006]], ['profline', [8978]], ['profsurf', [8979]], ['prop', [8733]], ['Proportional', [8733]], ['Proportion', [8759]], ['propto', [8733]], ['prsim', [8830]], ['prurel', [8880]], ['Pscr', [119979]], ['pscr', [120005]], ['Psi', [936]], ['psi', [968]], ['puncsp', [8200]], ['Qfr', [120084]], ['qfr', [120110]], ['qint', [10764]], ['qopf', [120162]], ['Qopf', [8474]], ['qprime', [8279]], ['Qscr', [119980]], ['qscr', [120006]], ['quaternions', [8461]], ['quatint', [10774]], ['quest', [63]], ['questeq', [8799]], ['quot', [34]], ['QUOT', [34]], ['rAarr', [8667]], ['race', [8765, 817]], ['Racute', [340]], ['racute', [341]], ['radic', [8730]], ['raemptyv', [10675]], ['rang', [10217]], ['Rang', [10219]], ['rangd', [10642]], ['range', [10661]], ['rangle', [10217]], ['raquo', [187]], ['rarrap', [10613]], ['rarrb', [8677]], ['rarrbfs', [10528]], ['rarrc', [10547]], ['rarr', [8594]], ['Rarr', [8608]], ['rArr', [8658]], ['rarrfs', [10526]], ['rarrhk', [8618]], ['rarrlp', [8620]], ['rarrpl', [10565]], ['rarrsim', [10612]], ['Rarrtl', [10518]], ['rarrtl', [8611]], ['rarrw', [8605]], ['ratail', [10522]], ['rAtail', [10524]], ['ratio', [8758]], ['rationals', [8474]], ['rbarr', [10509]], ['rBarr', [10511]], ['RBarr', [10512]], ['rbbrk', [10099]], ['rbrace', [125]], ['rbrack', [93]], ['rbrke', [10636]], ['rbrksld', [10638]], ['rbrkslu', [10640]], ['Rcaron', [344]], ['rcaron', [345]], ['Rcedil', [342]], ['rcedil', [343]], ['rceil', [8969]], ['rcub', [125]], ['Rcy', [1056]], ['rcy', [1088]], ['rdca', [10551]], ['rdldhar', [10601]], ['rdquo', [8221]], ['rdquor', [8221]], ['rdsh', [8627]], ['real', [8476]], ['realine', [8475]], ['realpart', [8476]], ['reals', [8477]], ['Re', [8476]], ['rect', [9645]], ['reg', [174]], ['REG', [174]], ['ReverseElement', [8715]], ['ReverseEquilibrium', [8651]], ['ReverseUpEquilibrium', [10607]], ['rfisht', [10621]], ['rfloor', [8971]], ['rfr', [120111]], ['Rfr', [8476]], ['rHar', [10596]], ['rhard', [8641]], ['rharu', [8640]], ['rharul', [10604]], ['Rho', [929]], ['rho', [961]], ['rhov', [1009]], ['RightAngleBracket', [10217]], ['RightArrowBar', [8677]], ['rightarrow', [8594]], ['RightArrow', [8594]], ['Rightarrow', [8658]], ['RightArrowLeftArrow', [8644]], ['rightarrowtail', [8611]], ['RightCeiling', [8969]], ['RightDoubleBracket', [10215]], ['RightDownTeeVector', [10589]], ['RightDownVectorBar', [10581]], ['RightDownVector', [8642]], ['RightFloor', [8971]], ['rightharpoondown', [8641]], ['rightharpoonup', [8640]], ['rightleftarrows', [8644]], ['rightleftharpoons', [8652]], ['rightrightarrows', [8649]], ['rightsquigarrow', [8605]], ['RightTeeArrow', [8614]], ['RightTee', [8866]], ['RightTeeVector', [10587]], ['rightthreetimes', [8908]], ['RightTriangleBar', [10704]], ['RightTriangle', [8883]], ['RightTriangleEqual', [8885]], ['RightUpDownVector', [10575]], ['RightUpTeeVector', [10588]], ['RightUpVectorBar', [10580]], ['RightUpVector', [8638]], ['RightVectorBar', [10579]], ['RightVector', [8640]], ['ring', [730]], ['risingdotseq', [8787]], ['rlarr', [8644]], ['rlhar', [8652]], ['rlm', [8207]], ['rmoustache', [9137]], ['rmoust', [9137]], ['rnmid', [10990]], ['roang', [10221]], ['roarr', [8702]], ['robrk', [10215]], ['ropar', [10630]], ['ropf', [120163]], ['Ropf', [8477]], ['roplus', [10798]], ['rotimes', [10805]], ['RoundImplies', [10608]], ['rpar', [41]], ['rpargt', [10644]], ['rppolint', [10770]], ['rrarr', [8649]], ['Rrightarrow', [8667]], ['rsaquo', [8250]], ['rscr', [120007]], ['Rscr', [8475]], ['rsh', [8625]], ['Rsh', [8625]], ['rsqb', [93]], ['rsquo', [8217]], ['rsquor', [8217]], ['rthree', [8908]], ['rtimes', [8906]], ['rtri', [9657]], ['rtrie', [8885]], ['rtrif', [9656]], ['rtriltri', [10702]], ['RuleDelayed', [10740]], ['ruluhar', [10600]], ['rx', [8478]], ['Sacute', [346]], ['sacute', [347]], ['sbquo', [8218]], ['scap', [10936]], ['Scaron', [352]], ['scaron', [353]], ['Sc', [10940]], ['sc', [8827]], ['sccue', [8829]], ['sce', [10928]], ['scE', [10932]], ['Scedil', [350]], ['scedil', [351]], ['Scirc', [348]], ['scirc', [349]], ['scnap', [10938]], ['scnE', [10934]], ['scnsim', [8937]], ['scpolint', [10771]], ['scsim', [8831]], ['Scy', [1057]], ['scy', [1089]], ['sdotb', [8865]], ['sdot', [8901]], ['sdote', [10854]], ['searhk', [10533]], ['searr', [8600]], ['seArr', [8664]], ['searrow', [8600]], ['sect', [167]], ['semi', [59]], ['seswar', [10537]], ['setminus', [8726]], ['setmn', [8726]], ['sext', [10038]], ['Sfr', [120086]], ['sfr', [120112]], ['sfrown', [8994]], ['sharp', [9839]], ['SHCHcy', [1065]], ['shchcy', [1097]], ['SHcy', [1064]], ['shcy', [1096]], ['ShortDownArrow', [8595]], ['ShortLeftArrow', [8592]], ['shortmid', [8739]], ['shortparallel', [8741]], ['ShortRightArrow', [8594]], ['ShortUpArrow', [8593]], ['shy', [173]], ['Sigma', [931]], ['sigma', [963]], ['sigmaf', [962]], ['sigmav', [962]], ['sim', [8764]], ['simdot', [10858]], ['sime', [8771]], ['simeq', [8771]], ['simg', [10910]], ['simgE', [10912]], ['siml', [10909]], ['simlE', [10911]], ['simne', [8774]], ['simplus', [10788]], ['simrarr', [10610]], ['slarr', [8592]], ['SmallCircle', [8728]], ['smallsetminus', [8726]], ['smashp', [10803]], ['smeparsl', [10724]], ['smid', [8739]], ['smile', [8995]], ['smt', [10922]], ['smte', [10924]], ['smtes', [10924, 65024]], ['SOFTcy', [1068]], ['softcy', [1100]], ['solbar', [9023]], ['solb', [10692]], ['sol', [47]], ['Sopf', [120138]], ['sopf', [120164]], ['spades', [9824]], ['spadesuit', [9824]], ['spar', [8741]], ['sqcap', [8851]], ['sqcaps', [8851, 65024]], ['sqcup', [8852]], ['sqcups', [8852, 65024]], ['Sqrt', [8730]], ['sqsub', [8847]], ['sqsube', [8849]], ['sqsubset', [8847]], ['sqsubseteq', [8849]], ['sqsup', [8848]], ['sqsupe', [8850]], ['sqsupset', [8848]], ['sqsupseteq', [8850]], ['square', [9633]], ['Square', [9633]], ['SquareIntersection', [8851]], ['SquareSubset', [8847]], ['SquareSubsetEqual', [8849]], ['SquareSuperset', [8848]], ['SquareSupersetEqual', [8850]], ['SquareUnion', [8852]], ['squarf', [9642]], ['squ', [9633]], ['squf', [9642]], ['srarr', [8594]], ['Sscr', [119982]], ['sscr', [120008]], ['ssetmn', [8726]], ['ssmile', [8995]], ['sstarf', [8902]], ['Star', [8902]], ['star', [9734]], ['starf', [9733]], ['straightepsilon', [1013]], ['straightphi', [981]], ['strns', [175]], ['sub', [8834]], ['Sub', [8912]], ['subdot', [10941]], ['subE', [10949]], ['sube', [8838]], ['subedot', [10947]], ['submult', [10945]], ['subnE', [10955]], ['subne', [8842]], ['subplus', [10943]], ['subrarr', [10617]], ['subset', [8834]], ['Subset', [8912]], ['subseteq', [8838]], ['subseteqq', [10949]], ['SubsetEqual', [8838]], ['subsetneq', [8842]], ['subsetneqq', [10955]], ['subsim', [10951]], ['subsub', [10965]], ['subsup', [10963]], ['succapprox', [10936]], ['succ', [8827]], ['succcurlyeq', [8829]], ['Succeeds', [8827]], ['SucceedsEqual', [10928]], ['SucceedsSlantEqual', [8829]], ['SucceedsTilde', [8831]], ['succeq', [10928]], ['succnapprox', [10938]], ['succneqq', [10934]], ['succnsim', [8937]], ['succsim', [8831]], ['SuchThat', [8715]], ['sum', [8721]], ['Sum', [8721]], ['sung', [9834]], ['sup1', [185]], ['sup2', [178]], ['sup3', [179]], ['sup', [8835]], ['Sup', [8913]], ['supdot', [10942]], ['supdsub', [10968]], ['supE', [10950]], ['supe', [8839]], ['supedot', [10948]], ['Superset', [8835]], ['SupersetEqual', [8839]], ['suphsol', [10185]], ['suphsub', [10967]], ['suplarr', [10619]], ['supmult', [10946]], ['supnE', [10956]], ['supne', [8843]], ['supplus', [10944]], ['supset', [8835]], ['Supset', [8913]], ['supseteq', [8839]], ['supseteqq', [10950]], ['supsetneq', [8843]], ['supsetneqq', [10956]], ['supsim', [10952]], ['supsub', [10964]], ['supsup', [10966]], ['swarhk', [10534]], ['swarr', [8601]], ['swArr', [8665]], ['swarrow', [8601]], ['swnwar', [10538]], ['szlig', [223]], ['Tab', [9]], ['target', [8982]], ['Tau', [932]], ['tau', [964]], ['tbrk', [9140]], ['Tcaron', [356]], ['tcaron', [357]], ['Tcedil', [354]], ['tcedil', [355]], ['Tcy', [1058]], ['tcy', [1090]], ['tdot', [8411]], ['telrec', [8981]], ['Tfr', [120087]], ['tfr', [120113]], ['there4', [8756]], ['therefore', [8756]], ['Therefore', [8756]], ['Theta', [920]], ['theta', [952]], ['thetasym', [977]], ['thetav', [977]], ['thickapprox', [8776]], ['thicksim', [8764]], ['ThickSpace', [8287, 8202]], ['ThinSpace', [8201]], ['thinsp', [8201]], ['thkap', [8776]], ['thksim', [8764]], ['THORN', [222]], ['thorn', [254]], ['tilde', [732]], ['Tilde', [8764]], ['TildeEqual', [8771]], ['TildeFullEqual', [8773]], ['TildeTilde', [8776]], ['timesbar', [10801]], ['timesb', [8864]], ['times', [215]], ['timesd', [10800]], ['tint', [8749]], ['toea', [10536]], ['topbot', [9014]], ['topcir', [10993]], ['top', [8868]], ['Topf', [120139]], ['topf', [120165]], ['topfork', [10970]], ['tosa', [10537]], ['tprime', [8244]], ['trade', [8482]], ['TRADE', [8482]], ['triangle', [9653]], ['triangledown', [9663]], ['triangleleft', [9667]], ['trianglelefteq', [8884]], ['triangleq', [8796]], ['triangleright', [9657]], ['trianglerighteq', [8885]], ['tridot', [9708]], ['trie', [8796]], ['triminus', [10810]], ['TripleDot', [8411]], ['triplus', [10809]], ['trisb', [10701]], ['tritime', [10811]], ['trpezium', [9186]], ['Tscr', [119983]], ['tscr', [120009]], ['TScy', [1062]], ['tscy', [1094]], ['TSHcy', [1035]], ['tshcy', [1115]], ['Tstrok', [358]], ['tstrok', [359]], ['twixt', [8812]], ['twoheadleftarrow', [8606]], ['twoheadrightarrow', [8608]], ['Uacute', [218]], ['uacute', [250]], ['uarr', [8593]], ['Uarr', [8607]], ['uArr', [8657]], ['Uarrocir', [10569]], ['Ubrcy', [1038]], ['ubrcy', [1118]], ['Ubreve', [364]], ['ubreve', [365]], ['Ucirc', [219]], ['ucirc', [251]], ['Ucy', [1059]], ['ucy', [1091]], ['udarr', [8645]], ['Udblac', [368]], ['udblac', [369]], ['udhar', [10606]], ['ufisht', [10622]], ['Ufr', [120088]], ['ufr', [120114]], ['Ugrave', [217]], ['ugrave', [249]], ['uHar', [10595]], ['uharl', [8639]], ['uharr', [8638]], ['uhblk', [9600]], ['ulcorn', [8988]], ['ulcorner', [8988]], ['ulcrop', [8975]], ['ultri', [9720]], ['Umacr', [362]], ['umacr', [363]], ['uml', [168]], ['UnderBar', [95]], ['UnderBrace', [9183]], ['UnderBracket', [9141]], ['UnderParenthesis', [9181]], ['Union', [8899]], ['UnionPlus', [8846]], ['Uogon', [370]], ['uogon', [371]], ['Uopf', [120140]], ['uopf', [120166]], ['UpArrowBar', [10514]], ['uparrow', [8593]], ['UpArrow', [8593]], ['Uparrow', [8657]], ['UpArrowDownArrow', [8645]], ['updownarrow', [8597]], ['UpDownArrow', [8597]], ['Updownarrow', [8661]], ['UpEquilibrium', [10606]], ['upharpoonleft', [8639]], ['upharpoonright', [8638]], ['uplus', [8846]], ['UpperLeftArrow', [8598]], ['UpperRightArrow', [8599]], ['upsi', [965]], ['Upsi', [978]], ['upsih', [978]], ['Upsilon', [933]], ['upsilon', [965]], ['UpTeeArrow', [8613]], ['UpTee', [8869]], ['upuparrows', [8648]], ['urcorn', [8989]], ['urcorner', [8989]], ['urcrop', [8974]], ['Uring', [366]], ['uring', [367]], ['urtri', [9721]], ['Uscr', [119984]], ['uscr', [120010]], ['utdot', [8944]], ['Utilde', [360]], ['utilde', [361]], ['utri', [9653]], ['utrif', [9652]], ['uuarr', [8648]], ['Uuml', [220]], ['uuml', [252]], ['uwangle', [10663]], ['vangrt', [10652]], ['varepsilon', [1013]], ['varkappa', [1008]], ['varnothing', [8709]], ['varphi', [981]], ['varpi', [982]], ['varpropto', [8733]], ['varr', [8597]], ['vArr', [8661]], ['varrho', [1009]], ['varsigma', [962]], ['varsubsetneq', [8842, 65024]], ['varsubsetneqq', [10955, 65024]], ['varsupsetneq', [8843, 65024]], ['varsupsetneqq', [10956, 65024]], ['vartheta', [977]], ['vartriangleleft', [8882]], ['vartriangleright', [8883]], ['vBar', [10984]], ['Vbar', [10987]], ['vBarv', [10985]], ['Vcy', [1042]], ['vcy', [1074]], ['vdash', [8866]], ['vDash', [8872]], ['Vdash', [8873]], ['VDash', [8875]], ['Vdashl', [10982]], ['veebar', [8891]], ['vee', [8744]], ['Vee', [8897]], ['veeeq', [8794]], ['vellip', [8942]], ['verbar', [124]], ['Verbar', [8214]], ['vert', [124]], ['Vert', [8214]], ['VerticalBar', [8739]], ['VerticalLine', [124]], ['VerticalSeparator', [10072]], ['VerticalTilde', [8768]], ['VeryThinSpace', [8202]], ['Vfr', [120089]], ['vfr', [120115]], ['vltri', [8882]], ['vnsub', [8834, 8402]], ['vnsup', [8835, 8402]], ['Vopf', [120141]], ['vopf', [120167]], ['vprop', [8733]], ['vrtri', [8883]], ['Vscr', [119985]], ['vscr', [120011]], ['vsubnE', [10955, 65024]], ['vsubne', [8842, 65024]], ['vsupnE', [10956, 65024]], ['vsupne', [8843, 65024]], ['Vvdash', [8874]], ['vzigzag', [10650]], ['Wcirc', [372]], ['wcirc', [373]], ['wedbar', [10847]], ['wedge', [8743]], ['Wedge', [8896]], ['wedgeq', [8793]], ['weierp', [8472]], ['Wfr', [120090]], ['wfr', [120116]], ['Wopf', [120142]], ['wopf', [120168]], ['wp', [8472]], ['wr', [8768]], ['wreath', [8768]], ['Wscr', [119986]], ['wscr', [120012]], ['xcap', [8898]], ['xcirc', [9711]], ['xcup', [8899]], ['xdtri', [9661]], ['Xfr', [120091]], ['xfr', [120117]], ['xharr', [10231]], ['xhArr', [10234]], ['Xi', [926]], ['xi', [958]], ['xlarr', [10229]], ['xlArr', [10232]], ['xmap', [10236]], ['xnis', [8955]], ['xodot', [10752]], ['Xopf', [120143]], ['xopf', [120169]], ['xoplus', [10753]], ['xotime', [10754]], ['xrarr', [10230]], ['xrArr', [10233]], ['Xscr', [119987]], ['xscr', [120013]], ['xsqcup', [10758]], ['xuplus', [10756]], ['xutri', [9651]], ['xvee', [8897]], ['xwedge', [8896]], ['Yacute', [221]], ['yacute', [253]], ['YAcy', [1071]], ['yacy', [1103]], ['Ycirc', [374]], ['ycirc', [375]], ['Ycy', [1067]], ['ycy', [1099]], ['yen', [165]], ['Yfr', [120092]], ['yfr', [120118]], ['YIcy', [1031]], ['yicy', [1111]], ['Yopf', [120144]], ['yopf', [120170]], ['Yscr', [119988]], ['yscr', [120014]], ['YUcy', [1070]], ['yucy', [1102]], ['yuml', [255]], ['Yuml', [376]], ['Zacute', [377]], ['zacute', [378]], ['Zcaron', [381]], ['zcaron', [382]], ['Zcy', [1047]], ['zcy', [1079]], ['Zdot', [379]], ['zdot', [380]], ['zeetrf', [8488]], ['ZeroWidthSpace', [8203]], ['Zeta', [918]], ['zeta', [950]], ['zfr', [120119]], ['Zfr', [8488]], ['ZHcy', [1046]], ['zhcy', [1078]], ['zigrarr', [8669]], ['zopf', [120171]], ['Zopf', [8484]], ['Zscr', [119989]], ['zscr', [120015]], ['zwj', [8205]], ['zwnj', [8204]]];\n\t\n\tvar alphaIndex = {};\n\tvar charIndex = {};\n\t\n\tcreateIndexes(alphaIndex, charIndex);\n\t\n\t/**\n\t * @constructor\n\t */\n\tfunction Html5Entities() {}\n\t\n\t/**\n\t * @param {String} str\n\t * @returns {String}\n\t */\n\tHtml5Entities.prototype.decode = function(str) {\n\t    if (str.length === 0) {\n\t        return '';\n\t    }\n\t    return str.replace(/&(#?[\\w\\d]+);?/g, function(s, entity) {\n\t        var chr;\n\t        if (entity.charAt(0) === \"#\") {\n\t            var code = entity.charAt(1) === 'x' ?\n\t                parseInt(entity.substr(2).toLowerCase(), 16) :\n\t                parseInt(entity.substr(1));\n\t\n\t            if (!(isNaN(code) || code < -32768 || code > 65535)) {\n\t                chr = String.fromCharCode(code);\n\t            }\n\t        } else {\n\t            chr = alphaIndex[entity];\n\t        }\n\t        return chr || s;\n\t    });\n\t};\n\t\n\t/**\n\t * @param {String} str\n\t * @returns {String}\n\t */\n\t Html5Entities.decode = function(str) {\n\t    return new Html5Entities().decode(str);\n\t };\n\t\n\t/**\n\t * @param {String} str\n\t * @returns {String}\n\t */\n\tHtml5Entities.prototype.encode = function(str) {\n\t    var strLength = str.length;\n\t    if (strLength === 0) {\n\t        return '';\n\t    }\n\t    var result = '';\n\t    var i = 0;\n\t    while (i < strLength) {\n\t        var charInfo = charIndex[str.charCodeAt(i)];\n\t        if (charInfo) {\n\t            var alpha = charInfo[str.charCodeAt(i + 1)];\n\t            if (alpha) {\n\t                i++;\n\t            } else {\n\t                alpha = charInfo[''];\n\t            }\n\t            if (alpha) {\n\t                result += \"&\" + alpha + \";\";\n\t                i++;\n\t                continue;\n\t            }\n\t        }\n\t        result += str.charAt(i);\n\t        i++;\n\t    }\n\t    return result;\n\t};\n\t\n\t/**\n\t * @param {String} str\n\t * @returns {String}\n\t */\n\t Html5Entities.encode = function(str) {\n\t    return new Html5Entities().encode(str);\n\t };\n\t\n\t/**\n\t * @param {String} str\n\t * @returns {String}\n\t */\n\tHtml5Entities.prototype.encodeNonUTF = function(str) {\n\t    var strLength = str.length;\n\t    if (strLength === 0) {\n\t        return '';\n\t    }\n\t    var result = '';\n\t    var i = 0;\n\t    while (i < strLength) {\n\t        var c = str.charCodeAt(i);\n\t        var charInfo = charIndex[c];\n\t        if (charInfo) {\n\t            var alpha = charInfo[str.charCodeAt(i + 1)];\n\t            if (alpha) {\n\t                i++;\n\t            } else {\n\t                alpha = charInfo[''];\n\t            }\n\t            if (alpha) {\n\t                result += \"&\" + alpha + \";\";\n\t                i++;\n\t                continue;\n\t            }\n\t        }\n\t        if (c < 32 || c > 126) {\n\t            result += '&#' + c + ';';\n\t        } else {\n\t            result += str.charAt(i);\n\t        }\n\t        i++;\n\t    }\n\t    return result;\n\t};\n\t\n\t/**\n\t * @param {String} str\n\t * @returns {String}\n\t */\n\t Html5Entities.encodeNonUTF = function(str) {\n\t    return new Html5Entities().encodeNonUTF(str);\n\t };\n\t\n\t/**\n\t * @param {String} str\n\t * @returns {String}\n\t */\n\tHtml5Entities.prototype.encodeNonASCII = function(str) {\n\t    var strLength = str.length;\n\t    if (strLength === 0) {\n\t        return '';\n\t    }\n\t    var result = '';\n\t    var i = 0;\n\t    while (i < strLength) {\n\t        var c = str.charCodeAt(i);\n\t        if (c <= 255) {\n\t            result += str[i++];\n\t            continue;\n\t        }\n\t        result += '&#' + c + ';';\n\t        i++\n\t    }\n\t    return result;\n\t};\n\t\n\t/**\n\t * @param {String} str\n\t * @returns {String}\n\t */\n\t Html5Entities.encodeNonASCII = function(str) {\n\t    return new Html5Entities().encodeNonASCII(str);\n\t };\n\t\n\t/**\n\t * @param {Object} alphaIndex Passed by reference.\n\t * @param {Object} charIndex Passed by reference.\n\t */\n\tfunction createIndexes(alphaIndex, charIndex) {\n\t    var i = ENTITIES.length;\n\t    var _results = [];\n\t    while (i--) {\n\t        var e = ENTITIES[i];\n\t        var alpha = e[0];\n\t        var chars = e[1];\n\t        var chr = chars[0];\n\t        var addChar = (chr < 32 || chr > 126) || chr === 62 || chr === 60 || chr === 38 || chr === 34 || chr === 39;\n\t        var charInfo;\n\t        if (addChar) {\n\t            charInfo = charIndex[chr] = charIndex[chr] || {};\n\t        }\n\t        if (chars[1]) {\n\t            var chr2 = chars[1];\n\t            alphaIndex[alpha] = String.fromCharCode(chr) + String.fromCharCode(chr2);\n\t            _results.push(addChar && (charInfo[chr2] = alpha));\n\t        } else {\n\t            alphaIndex[alpha] = String.fromCharCode(chr);\n\t            _results.push(addChar && (charInfo[''] = alpha));\n\t        }\n\t    }\n\t}\n\t\n\tmodule.exports = Html5Entities;\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function(text){\n\t\n\t  // Dashes\n\t  text = text.replace(/--/g, '–');\n\t  text = text.replace(/ – /g,'&thinsp;&ndash;&thinsp;');\n\t\n\t  // Elipses\n\t  text = text.replace(/\\.\\.\\./g,'…');\n\t\n\t  // Nbsp for punc with spaces\n\t  var NBSP = '&nbsp;';\n\t  var NBSP_PUNCTUATION_START = /([«¿¡]) /g;\n\t  var NBSP_PUNCTUATION_END = / ([\\!\\?:;\\.,‽»])/g;\n\t\n\t  text = text.replace(NBSP_PUNCTUATION_START, '$1' + NBSP);\n\t  text = text.replace(NBSP_PUNCTUATION_END, NBSP + '$1');\n\t\n\t  return text;\n\t};\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\tfunction pull (className, content) {\n\t  return '<span class=\"pull-' + className +'\">' + (content || '') + '</span>';\n\t}\n\t\n\tfunction push (className, content) {\n\t  return '<span class=\"push-' + className +'\">' + (content || '') + '</span>';\n\t}\n\t\n\tvar doubleWidth = ['&quot;', '\"', \"“\", \"„\", \"”\", \"&ldquo;\", \"&OpenCurlyDoubleQuote;\", \"&#8220;\", \"&#x0201C;\", \"&rdquor;\", \"&rdquo;\", '&CloseCurlyDoubleQuote;', '&#8221;', '&ldquor;', '&bdquo;', '&#8222;'];\n\tvar singleWidth = [\"'\", '&prime;', '&apos;', '&lsquo;', '&rsquo;', '‘', '’'];\n\t\n\tvar diacriticMap = {\n\t  'A' : /[\\u0041\\u24B6\\uFF21\\u00C0\\u00C1\\u00C2\\u1EA6\\u1EA4\\u1EAA\\u1EA8\\u00C3\\u0100\\u0102\\u1EB0\\u1EAE\\u1EB4\\u1EB2\\u0226\\u01E0\\u00C4\\u01DE\\u1EA2\\u00C5\\u01FA\\u01CD\\u0200\\u0202\\u1EA0\\u1EAC\\u1EB6\\u1E00\\u0104\\u023A\\u2C6F]/g,\n\t  'C' : /[\\u0043\\u24B8\\uFF23\\u0106\\u0108\\u010A\\u010C\\u00C7\\u1E08\\u0187\\u023B\\uA73E]/g,\n\t  'O' : /[\\u004F\\u24C4\\uFF2F\\u00D2\\u00D3\\u00D4\\u1ED2\\u1ED0\\u1ED6\\u1ED4\\u00D5\\u1E4C\\u022C\\u1E4E\\u014C\\u1E50\\u1E52\\u014E\\u022E\\u0230\\u00D6\\u022A\\u1ECE\\u0150\\u01D1\\u020C\\u020E\\u01A0\\u1EDC\\u1EDA\\u1EE0\\u1EDE\\u1EE2\\u1ECC\\u1ED8\\u01EA\\u01EC\\u00D8\\u01FE\\u0186\\u019F\\uA74A\\uA74C]/g,\n\t  'T' : /[\\u0054\\u24C9\\uFF34\\u1E6A\\u0164\\u1E6C\\u021A\\u0162\\u1E70\\u1E6E\\u0166\\u01AC\\u01AE\\u023E\\uA786]/g,\n\t  'V' : /[\\u0056\\u24CB\\uFF36\\u1E7C\\u1E7E\\u01B2\\uA75E\\u0245]/g,\n\t  'W' : /[\\u0057\\u24CC\\uFF37\\u1E80\\u1E82\\u0174\\u1E86\\u1E84\\u1E88\\u2C72]/g,\n\t  'Y' : /[\\u0059\\u24CE\\uFF39\\u1EF2\\u00DD\\u0176\\u1EF8\\u0232\\u1E8E\\u0178\\u1EF6\\u1EF4\\u01B3\\u024E\\u1EFE]/g,\n\t  'c' : /[\\u0063\\u24D2\\uFF43\\u0107\\u0109\\u010B\\u010D\\u00E7\\u1E09\\u0188\\u023C\\uA73F\\u2184]/g,\n\t  'o' : /[\\u006F\\u24DE\\uFF4F\\u00F2\\u00F3\\u00F4\\u1ED3\\u1ED1\\u1ED7\\u1ED5\\u00F5\\u1E4D\\u022D\\u1E4F\\u014D\\u1E51\\u1E53\\u014F\\u022F\\u0231\\u00F6\\u022B\\u1ECF\\u0151\\u01D2\\u020D\\u020F\\u01A1\\u1EDD\\u1EDB\\u1EE1\\u1EDF\\u1EE3\\u1ECD\\u1ED9\\u01EB\\u01ED\\u00F8\\u01FF\\u0254\\uA74B\\uA74D\\u0275]/g,\n\t  'v' : /[\\u0076\\u24E5\\uFF56\\u1E7D\\u1E7F\\u028B\\uA75F\\u028C]/g,\n\t  'w' : /[\\u0077\\u24E6\\uFF57\\u1E81\\u1E83\\u0175\\u1E87\\u1E85\\u1E98\\u1E89\\u2C73]/g\n\t}\n\t\n\tvar alignMe = \"CcOoYTAVvWw\".split('');\n\t\n\tmodule.exports = function(text, node, $){\n\t\n\t  // Remove consecutive double spaces then create\n\t  // array of distinct words.\n\t  var words = text.split(' ').join(' ').split(' ');\n\t\n\t  for (var i in words) {\n\t\n\t    // This is the code to do\n\t    // optical margin alignment.\n\t\n\t    // It's disabled for now due to accessibility issues.\n\t\n\t    // for (var a in alignMe) {\n\t\n\t    //   var align = alignMe[a];\n\t    //   var letter = words[i].slice(0,align.length);\n\t\n\t    //   if (letter === align || diacriticMap[align] && diacriticMap[align].test(letter)) {\n\t\n\t    //     var insert = pull(align, letter);\n\t\n\t    //     if (words[(i-1)]) {\n\t    //       words[(i-1)] = words[(i-1)] + push(align);\n\t    //     } else if (hasAdjacentText($, node)) {\n\t    //       insert = push(align) + insert;\n\t    //     }\n\t\n\t    //     words[i] = insert + words[i].slice(align.length);\n\t\n\t    //   }\n\t    // }\n\t\n\t    for (var b in singleWidth) {\n\t\n\t      var punctuation = singleWidth[b];\n\t\n\t      if (words[i].slice(0,punctuation.length) === punctuation) {\n\t\n\t        var insert = pull('single', punctuation);\n\t\n\t        if (words[(i-1)]) {\n\t          words[(i-1)] = words[(i-1)] + push('single');\n\t        } else if (hasAdjacentText($, node)) {\n\t          insert = push('single') + insert;\n\t        }\n\t\n\t        words[i] = insert + words[i].slice(punctuation.length);\n\t\n\t      }\n\t    }\n\t\n\t    for (var c in doubleWidth) {\n\t\n\t      var punctuation = doubleWidth[c];\n\t\n\t      if (words[i].slice(0,punctuation.length) === punctuation) {\n\t\n\t        var insert = pull('double', punctuation);\n\t\n\t        if (words[(i-1)]) {\n\t          words[(i-1)] = words[(i-1)] + push('double');\n\t        } else if (hasAdjacentText($, node)) {\n\t          insert = push('double') + insert;\n\t        }\n\t\n\t        words[i] = insert + words[i].slice(punctuation.length);\n\t      }\n\t    }\n\t  }\n\t\n\t  text = words.join(' ');\n\t\n\t  return text;\n\t};\n\t\n\t\n\tfunction hasAdjacentText ($, node) {\n\t\n\t  // the nearest sibling to this text node\n\t  // you can have two adjacent text nodes\n\t  // since they'd jsut be one node.\n\t\n\t  // however, the previous sibling could end with a text node\n\t  // if so, we need to add the spacer to prevent overlap\n\t  if (node.prev && node.prev.children && node.prev.children.length) {\n\t\n\t    var lastChild = node.prev.children.slice(-1)[0];\n\t\n\t    if (lastChild && lastChild.type === 'text') {\n\t      return true;\n\t    }\n\t  }\n\t\n\t  if (!$(node).parent() || !$(node).parent().length)\n\t    return false;\n\t\n\t  var parentPrev = $(node).parent()[0].prev;\n\t\n\t  // Ensure the parent has text content\n\t  // and is not simply a newline seperating tags\n\t  if (parentPrev && parentPrev.type === 'text' && parentPrev.data.trim()) {\n\t    return true;\n\t  }\n\t\n\t  return false;\n\t\n\t}\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function(text){\n\t  // replaces wide spaces with hair spaces\n\t  text = text.replace(/ × /g, ' × ');\n\t  text = text.replace(/ \\/ /g, ' / ');\n\t\n\t  return text;\n\t};\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar cheerio, jquery, escape;\n\t\n\tif (true) {\n\t  jquery = __webpack_require__(12);\n\t  escape = function(text) {\n\t    return text.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n\t  };\n\t} else {\n\t  cheerio = require('cheerio');\n\t}\n\t\n\t// An easy way to apply a function to each text node\n\t// doThis accepts a text string of a text node's content\n\t// and returns the modified string.\n\t\n\tvar IGNORE = 'head, code, pre, script, style, [class^=\"pull-\"], [class^=\"push-\"], .small-caps';\n\t\n\tmodule.exports = function(html, doThis, options){\n\t\n\t  var ignore = IGNORE;\n\t  var only = (jquery && html) || (options && options.only) || ':root';\n\t\n\t  if (options && options.ignore) ignore += ', ' + options.ignore;\n\t\n\t  var $ = jquery || cheerio.load(html, {decodeEntities: false});\n\t\n\t  var processedText = $(only).each(function(){findTextNodes(this);});\n\t\n\t  function findTextNodes(node) {\n\t\n\t    if ($(node).is(ignore)) return false;\n\t\n\t    $(node).contents().each(function(){\n\t\n\t      var childNode = this;\n\t\n\t      if (childNode.nodeType === 3) {\n\t\n\t        var text = escape ? escape(childNode.data) : childNode.data;\n\t\n\t        text = text.replace(/&#39;/g, \"'\");\n\t        text = text.replace(/&quot;/g, '\"');\n\t\n\t        childNode.data = text;\n\t\n\t        $(childNode).replaceWith(doThis(text, childNode, $));\n\t\n\t      } else {\n\t        findTextNodes(childNode);\n\t      }\n\t    });\n\t  }\n\t\n\t  return (jquery && processedText[0]) || $.html();\n\t};\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n\tmodule.exports = jQuery;\n\n/***/ }\n/******/ ]);\n\n\n/** WEBPACK FOOTER **\n ** typeset.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap e9a5937460dc75897240\n **/","var modules = {\n  quotes: require('./quotes'),\n  // hyphenate: require('./hyphenate'),\n  ligatures: require('./ligatures'),\n  smallCaps: require('./smallCaps'),\n  punctuation: require('./punctuation'),\n  hangingPunctuation: require('./hangingPunctuation'),\n  spaces: require('./spaces')\n};\n\nvar eachTextNode = require('./eachTextNode');\n\nmodule.exports = function(html, options){\n\n  options = options || {};\n\n  for (var i in modules) {\n\n    // Check against enable list\n    if (options.enable && options.enable.indexOf(i) === -1)\n      continue;\n\n    // Check against disable list\n    if (options.disable && options.disable.indexOf(i) !== -1)\n      continue;\n\n    // Pass the HTML to each module\n    html = eachTextNode(html, modules[i], options);\n  }\n\n  return html;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/index.js\n ** module id = 0\n ** module chunks = 0\n **/","module.exports = function(text, node, $){\n\n  // This helps resolve substitution issues\n  // when a next node is adjacent to another text node,\n  // e.g. a link tag or emphasis tag.\n\n  // this only works if replace does not modify the length\n  // of the string it is passed. therefore the\n  if ($(node).parent().is('p, blockquote') && $(node).parent().text() !== text) {\n\n    var parentText = replace($(node).parent().text());\n    var start = 0;\n\n    $(node).parent().contents().each(function(){\n\n      if (this === node) return false;\n\n      start += $(this).text().length;\n    });\n\n    return parentText.slice(start, start + text.length);\n  }\n\n  return replace(text);\n};\n\nfunction replace (text) {\n\n  // Revert encoded chars so the regex mystery\n  // below works properly\n\n  text = text\n    .replace(/(\\W|^)\"([^\\s\\!\\?:;\\.,‽»])/g, '$1\\u201c$2') // beginning \"\n    .replace(/(\\u201c[^\"]*)\"([^\"]*$|[^\\u201c\"]*\\u201c)/g, '$1\\u201d$2') // ending \"\n    .replace(/([^0-9])\"/g,'$1\\u201d') // remaining \" at end of word\n    .replace(/(\\W|^)'(\\S)/g, '$1\\u2018$2') // beginning '\n    .replace(/([a-z])'([a-z])/ig, '$1\\u2019$2') // conjunction's possession\n    .replace(/((\\u2018[^']*)|[a-z])'([^0-9]|$)/ig, '$1\\u2019$3') // ending '\n    .replace(/(\\u2018)([0-9]{2}[^\\u2019]*)(\\u2018([^0-9]|$)|$|\\u2019[a-z])/ig, '\\u2019$2$3') // abbrev. years like '93\n    .replace(/(\\B|^)\\u2018(?=([^\\u2019]*\\u2019\\b)*([^\\u2019\\u2018]*\\W[\\u2019\\u2018]\\b|[^\\u2019\\u2018]*$))/ig, '$1\\u2019') // backwards apostrophe\n    .replace(/'''/g, '\\u2034') // triple prime\n    .replace(/(\"|'')/g, '\\u2033') // double prime\n    .replace(/'/g, '\\u2032');\n\n  // Allow escaped quotes\n  text = text.replace(/\\\\“/, '\\\"');\n  text = text.replace(/\\\\”/, '\\\"');\n  text = text.replace(/\\\\’/, '\\'');\n  text = text.replace(/\\\\‘/, '\\'');\n\n  return text;\n}\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/quotes.js\n ** module id = 1\n ** module chunks = 0\n **/","module.exports = function(text){\n\n  text = text.replace(/fi/g, 'ﬁ');\n  text = text.replace(/fl/g, 'ﬂ');\n\n  return text;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/ligatures.js\n ** module id = 2\n ** module chunks = 0\n **/","var Entities = require('html-entities').AllHtmlEntities;\nvar entities = new Entities();\n\n// Only numbers regex\nvar onlyNumbers = new RegExp('^\\\\d+$');\n\n// Ensure the word has a length of more than 2 letters,\n// does not contain punctation since exterior punctuation\n// has been stripped by this point. If so, then see if the\n// uppercase version of the word is indentical, if so it's\n// very probably an acronym\nfunction isAcronym (word) {\n\n  return word.length &&\n    word.trim().length > 1 &&\n    !(onlyNumbers.test(word.replace(/[\\.,-\\/#!–$%°\\^&\\*;?:+′|@\\[\\]{}=\\-_`~()]/g,\"\"))) &&\n    word.replace(/[\\.,-\\/#!$%\\^&\\*;–?:+|@\\[\\]{}=\\-_`~(′°)]/g,\"\") === word &&\n    word.toUpperCase() === word;\n}\n\nfunction removeCruft (word) {\n\n  var wordSplitters = \"-‘’′‘’'\".split('').concat(['&#39;']);\n  var ignore = \"{}()-‘’[]!#$*&;:,.“”″′‘’\\\"'\".split('').concat(['&quot;']);\n\n  var encodedIgnore = ignore.slice(0);\n  var encodedWordSplitters = wordSplitters.slice(0);\n\n  for (var x in encodedIgnore)\n    encodedIgnore[x] = entities.encode(encodedIgnore[x]);\n\n  for (var x in encodedWordSplitters)\n    encodedWordSplitters[x] = entities.encode(encodedWordSplitters[x]);\n\n  ignore = ignore.concat(encodedIgnore);\n  wordSplitters = wordSplitters.concat(encodedWordSplitters);\n\n  var trailing = '',\n  leading = '';\n\n  for (var i = 0; i < wordSplitters.length; i++) {\n\n    var ignoreThis = wordSplitters[i];\n    var endOfWord = (word.match(ignoreThis+'.*$') || [])[0];\n\n    if (endOfWord && endOfWord != word) {\n      trailing = endOfWord + trailing;\n      word = word.slice(0, -endOfWord.length);\n      i = 0;continue;\n    }\n\n  }\n\n  for (var j = 0; j < wordSplitters.length; j++) {\n\n    var ignoreThis = wordSplitters[j];\n    var startOfWord = (word.match('^.*'+ignoreThis) || [])[0];\n\n    if (startOfWord) {\n      leading += startOfWord;\n      word = word.slice(startOfWord.length);\n      j = 0;continue;\n    }\n\n  }\n\n  for (var i = 0; i < ignore.length; i++) {\n\n    var ignoreThis = ignore[i],\n    endOfWord = word.slice(-ignoreThis.length);\n\n    if (endOfWord === ignoreThis) {\n      trailing = ignoreThis + trailing;\n      word = word.slice(0, -ignoreThis.length);\n      i = 0;continue;\n    }\n\n  }\n\n  for (var j = 0; j < ignore.length; j++) {\n\n    var ignoreThis = ignore[j],\n    startOfWord = word.slice(0, ignoreThis.length);\n\n    if (startOfWord === ignoreThis) {\n      leading += ignoreThis;\n      word = word.slice(ignoreThis.length);\n      j = 0;continue;\n    }\n\n  }\n\n  return [leading, word, trailing];\n}\n\nmodule.exports = function(text){\n\n  var wordList = text.split(' ');\n\n  for (var i in wordList) {\n\n    var brokenWord = removeCruft(wordList[i]),\n    word = brokenWord[1],\n    leading = brokenWord[0],\n    trailing = brokenWord[2];\n\n    if (isAcronym(word)) {\n      wordList[i] = leading + '<span class=\"small-caps\">' + word + '</span>' + trailing;\n    }\n  }\n\n  return  wordList.join(' ');\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/smallCaps.js\n ** module id = 3\n ** module chunks = 0\n **/","module.exports = {\n  XmlEntities: require('./lib/xml-entities.js'),\n  Html4Entities: require('./lib/html4-entities.js'),\n  Html5Entities: require('./lib/html5-entities.js'),\n  AllHtmlEntities: require('./lib/html5-entities.js')\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/html-entities/index.js\n ** module id = 4\n ** module chunks = 0\n **/","var ALPHA_INDEX = {\n    '&lt': '<',\n    '&gt': '>',\n    '&quot': '\"',\n    '&apos': '\\'',\n    '&amp': '&',\n    '&lt;': '<',\n    '&gt;': '>',\n    '&quot;': '\"',\n    '&apos;': '\\'',\n    '&amp;': '&'\n};\n\nvar CHAR_INDEX = {\n    60: 'lt',\n    62: 'gt',\n    34: 'quot',\n    39: 'apos',\n    38: 'amp'\n};\n\nvar CHAR_S_INDEX = {\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    '\\'': '&apos;',\n    '&': '&amp;'\n};\n\n/**\n * @constructor\n */\nfunction XmlEntities() {}\n\n/**\n * @param {String} str\n * @returns {String}\n */\nXmlEntities.prototype.encode = function(str) {\n    if (str.length === 0) {\n        return '';\n    }\n    return str.replace(/<|>|\"|'|&/g, function(s) {\n        return CHAR_S_INDEX[s];\n    });\n};\n\n/**\n * @param {String} str\n * @returns {String}\n */\n XmlEntities.encode = function(str) {\n    return new XmlEntities().encode(str);\n };\n\n/**\n * @param {String} str\n * @returns {String}\n */\nXmlEntities.prototype.decode = function(str) {\n    if (str.length === 0) {\n        return '';\n    }\n    return str.replace(/&#?[0-9a-zA-Z]+;?/g, function(s) {\n        if (s.charAt(1) === '#') {\n            var code = s.charAt(2).toLowerCase() === 'x' ?\n                parseInt(s.substr(3), 16) :\n                parseInt(s.substr(2));\n\n            if (isNaN(code) || code < -32768 || code > 65535) {\n                return '';\n            }\n            return String.fromCharCode(code);\n        }\n        return ALPHA_INDEX[s] || s;\n    });\n};\n\n/**\n * @param {String} str\n * @returns {String}\n */\n XmlEntities.decode = function(str) {\n    return new XmlEntities().decode(str);\n };\n\n/**\n * @param {String} str\n * @returns {String}\n */\nXmlEntities.prototype.encodeNonUTF = function(str) {\n    var strLength = str.length;\n    if (strLength === 0) {\n        return '';\n    }\n    var result = '';\n    var i = 0;\n    while (i < strLength) {\n        var c = str.charCodeAt(i);\n        var alpha = CHAR_INDEX[c];\n        if (alpha) {\n            result += \"&\" + alpha + \";\";\n            i++;\n            continue;\n        }\n        if (c < 32 || c > 126) {\n            result += '&#' + c + ';';\n        } else {\n            result += str.charAt(i);\n        }\n        i++;\n    }\n    return result;\n};\n\n/**\n * @param {String} str\n * @returns {String}\n */\n XmlEntities.encodeNonUTF = function(str) {\n    return new XmlEntities().encodeNonUTF(str);\n };\n\n/**\n * @param {String} str\n * @returns {String}\n */\nXmlEntities.prototype.encodeNonASCII = function(str) {\n    var strLenght = str.length;\n    if (strLenght === 0) {\n        return '';\n    }\n    var result = '';\n    var i = 0;\n    while (i < strLenght) {\n        var c = str.charCodeAt(i);\n        if (c <= 255) {\n            result += str[i++];\n            continue;\n        }\n        result += '&#' + c + ';';\n        i++;\n    }\n    return result;\n};\n\n/**\n * @param {String} str\n * @returns {String}\n */\n XmlEntities.encodeNonASCII = function(str) {\n    return new XmlEntities().encodeNonASCII(str);\n };\n\nmodule.exports = XmlEntities;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/html-entities/lib/xml-entities.js\n ** module id = 5\n ** module chunks = 0\n **/","var HTML_ALPHA = ['apos', 'nbsp', 'iexcl', 'cent', 'pound', 'curren', 'yen', 'brvbar', 'sect', 'uml', 'copy', 'ordf', 'laquo', 'not', 'shy', 'reg', 'macr', 'deg', 'plusmn', 'sup2', 'sup3', 'acute', 'micro', 'para', 'middot', 'cedil', 'sup1', 'ordm', 'raquo', 'frac14', 'frac12', 'frac34', 'iquest', 'Agrave', 'Aacute', 'Acirc', 'Atilde', 'Auml', 'Aring', 'Aelig', 'Ccedil', 'Egrave', 'Eacute', 'Ecirc', 'Euml', 'Igrave', 'Iacute', 'Icirc', 'Iuml', 'ETH', 'Ntilde', 'Ograve', 'Oacute', 'Ocirc', 'Otilde', 'Ouml', 'times', 'Oslash', 'Ugrave', 'Uacute', 'Ucirc', 'Uuml', 'Yacute', 'THORN', 'szlig', 'agrave', 'aacute', 'acirc', 'atilde', 'auml', 'aring', 'aelig', 'ccedil', 'egrave', 'eacute', 'ecirc', 'euml', 'igrave', 'iacute', 'icirc', 'iuml', 'eth', 'ntilde', 'ograve', 'oacute', 'ocirc', 'otilde', 'ouml', 'divide', 'Oslash', 'ugrave', 'uacute', 'ucirc', 'uuml', 'yacute', 'thorn', 'yuml', 'quot', 'amp', 'lt', 'gt', 'oelig', 'oelig', 'scaron', 'scaron', 'yuml', 'circ', 'tilde', 'ensp', 'emsp', 'thinsp', 'zwnj', 'zwj', 'lrm', 'rlm', 'ndash', 'mdash', 'lsquo', 'rsquo', 'sbquo', 'ldquo', 'rdquo', 'bdquo', 'dagger', 'dagger', 'permil', 'lsaquo', 'rsaquo', 'euro', 'fnof', 'alpha', 'beta', 'gamma', 'delta', 'epsilon', 'zeta', 'eta', 'theta', 'iota', 'kappa', 'lambda', 'mu', 'nu', 'xi', 'omicron', 'pi', 'rho', 'sigma', 'tau', 'upsilon', 'phi', 'chi', 'psi', 'omega', 'alpha', 'beta', 'gamma', 'delta', 'epsilon', 'zeta', 'eta', 'theta', 'iota', 'kappa', 'lambda', 'mu', 'nu', 'xi', 'omicron', 'pi', 'rho', 'sigmaf', 'sigma', 'tau', 'upsilon', 'phi', 'chi', 'psi', 'omega', 'thetasym', 'upsih', 'piv', 'bull', 'hellip', 'prime', 'prime', 'oline', 'frasl', 'weierp', 'image', 'real', 'trade', 'alefsym', 'larr', 'uarr', 'rarr', 'darr', 'harr', 'crarr', 'larr', 'uarr', 'rarr', 'darr', 'harr', 'forall', 'part', 'exist', 'empty', 'nabla', 'isin', 'notin', 'ni', 'prod', 'sum', 'minus', 'lowast', 'radic', 'prop', 'infin', 'ang', 'and', 'or', 'cap', 'cup', 'int', 'there4', 'sim', 'cong', 'asymp', 'ne', 'equiv', 'le', 'ge', 'sub', 'sup', 'nsub', 'sube', 'supe', 'oplus', 'otimes', 'perp', 'sdot', 'lceil', 'rceil', 'lfloor', 'rfloor', 'lang', 'rang', 'loz', 'spades', 'clubs', 'hearts', 'diams'];\nvar HTML_CODES = [39, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 34, 38, 60, 62, 338, 339, 352, 353, 376, 710, 732, 8194, 8195, 8201, 8204, 8205, 8206, 8207, 8211, 8212, 8216, 8217, 8218, 8220, 8221, 8222, 8224, 8225, 8240, 8249, 8250, 8364, 402, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 977, 978, 982, 8226, 8230, 8242, 8243, 8254, 8260, 8472, 8465, 8476, 8482, 8501, 8592, 8593, 8594, 8595, 8596, 8629, 8656, 8657, 8658, 8659, 8660, 8704, 8706, 8707, 8709, 8711, 8712, 8713, 8715, 8719, 8721, 8722, 8727, 8730, 8733, 8734, 8736, 8743, 8744, 8745, 8746, 8747, 8756, 8764, 8773, 8776, 8800, 8801, 8804, 8805, 8834, 8835, 8836, 8838, 8839, 8853, 8855, 8869, 8901, 8968, 8969, 8970, 8971, 9001, 9002, 9674, 9824, 9827, 9829, 9830];\n\nvar alphaIndex = {};\nvar numIndex = {};\n\nvar i = 0;\nvar length = HTML_ALPHA.length;\nwhile (i < length) {\n    var a = HTML_ALPHA[i];\n    var c = HTML_CODES[i];\n    alphaIndex[a] = String.fromCharCode(c);\n    numIndex[c] = a;\n    i++;\n}\n\n/**\n * @constructor\n */\nfunction Html4Entities() {}\n\n/**\n * @param {String} str\n * @returns {String}\n */\nHtml4Entities.prototype.decode = function(str) {\n    if (str.length === 0) {\n        return '';\n    }\n    return str.replace(/&(#?[\\w\\d]+);?/g, function(s, entity) {\n        var chr;\n        if (entity.charAt(0) === \"#\") {\n            var code = entity.charAt(1).toLowerCase() === 'x' ?\n                parseInt(entity.substr(2), 16) :\n                parseInt(entity.substr(1));\n\n            if (!(isNaN(code) || code < -32768 || code > 65535)) {\n                chr = String.fromCharCode(code);\n            }\n        } else {\n            chr = alphaIndex[entity];\n        }\n        return chr || s;\n    });\n};\n\n/**\n * @param {String} str\n * @returns {String}\n */\nHtml4Entities.decode = function(str) {\n    return new Html4Entities().decode(str);\n};\n\n/**\n * @param {String} str\n * @returns {String}\n */\nHtml4Entities.prototype.encode = function(str) {\n    var strLength = str.length;\n    if (strLength === 0) {\n        return '';\n    }\n    var result = '';\n    var i = 0;\n    while (i < strLength) {\n        var alpha = numIndex[str.charCodeAt(i)];\n        result += alpha ? \"&\" + alpha + \";\" : str.charAt(i);\n        i++;\n    }\n    return result;\n};\n\n/**\n * @param {String} str\n * @returns {String}\n */\nHtml4Entities.encode = function(str) {\n    return new Html4Entities().encode(str);\n};\n\n/**\n * @param {String} str\n * @returns {String}\n */\nHtml4Entities.prototype.encodeNonUTF = function(str) {\n    var strLength = str.length;\n    if (strLength === 0) {\n        return '';\n    }\n    var result = '';\n    var i = 0;\n    while (i < strLength) {\n        var cc = str.charCodeAt(i);\n        var alpha = numIndex[cc];\n        if (alpha) {\n            result += \"&\" + alpha + \";\";\n        } else if (cc < 32 || cc > 126) {\n            result += \"&#\" + cc + \";\";\n        } else {\n            result += str.charAt(i);\n        }\n        i++;\n    }\n    return result;\n};\n\n/**\n * @param {String} str\n * @returns {String}\n */\nHtml4Entities.encodeNonUTF = function(str) {\n    return new Html4Entities().encodeNonUTF(str);\n};\n\n/**\n * @param {String} str\n * @returns {String}\n */\nHtml4Entities.prototype.encodeNonASCII = function(str) {\n    var strLength = str.length;\n    if (strLength === 0) {\n        return '';\n    }\n    var result = '';\n    var i = 0;\n    while (i < strLength) {\n        var c = str.charCodeAt(i);\n        if (c <= 255) {\n            result += str[i++];\n            continue;\n        }\n        result += '&#' + c + ';';\n        i++;\n    }\n    return result;\n};\n\n/**\n * @param {String} str\n * @returns {String}\n */\nHtml4Entities.encodeNonASCII = function(str) {\n    return new Html4Entities().encodeNonASCII(str);\n};\n\nmodule.exports = Html4Entities;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/html-entities/lib/html4-entities.js\n ** module id = 6\n ** module chunks = 0\n **/","var ENTITIES = [['Aacute', [193]], ['aacute', [225]], ['Abreve', [258]], ['abreve', [259]], ['ac', [8766]], ['acd', [8767]], ['acE', [8766, 819]], ['Acirc', [194]], ['acirc', [226]], ['acute', [180]], ['Acy', [1040]], ['acy', [1072]], ['AElig', [198]], ['aelig', [230]], ['af', [8289]], ['Afr', [120068]], ['afr', [120094]], ['Agrave', [192]], ['agrave', [224]], ['alefsym', [8501]], ['aleph', [8501]], ['Alpha', [913]], ['alpha', [945]], ['Amacr', [256]], ['amacr', [257]], ['amalg', [10815]], ['amp', [38]], ['AMP', [38]], ['andand', [10837]], ['And', [10835]], ['and', [8743]], ['andd', [10844]], ['andslope', [10840]], ['andv', [10842]], ['ang', [8736]], ['ange', [10660]], ['angle', [8736]], ['angmsdaa', [10664]], ['angmsdab', [10665]], ['angmsdac', [10666]], ['angmsdad', [10667]], ['angmsdae', [10668]], ['angmsdaf', [10669]], ['angmsdag', [10670]], ['angmsdah', [10671]], ['angmsd', [8737]], ['angrt', [8735]], ['angrtvb', [8894]], ['angrtvbd', [10653]], ['angsph', [8738]], ['angst', [197]], ['angzarr', [9084]], ['Aogon', [260]], ['aogon', [261]], ['Aopf', [120120]], ['aopf', [120146]], ['apacir', [10863]], ['ap', [8776]], ['apE', [10864]], ['ape', [8778]], ['apid', [8779]], ['apos', [39]], ['ApplyFunction', [8289]], ['approx', [8776]], ['approxeq', [8778]], ['Aring', [197]], ['aring', [229]], ['Ascr', [119964]], ['ascr', [119990]], ['Assign', [8788]], ['ast', [42]], ['asymp', [8776]], ['asympeq', [8781]], ['Atilde', [195]], ['atilde', [227]], ['Auml', [196]], ['auml', [228]], ['awconint', [8755]], ['awint', [10769]], ['backcong', [8780]], ['backepsilon', [1014]], ['backprime', [8245]], ['backsim', [8765]], ['backsimeq', [8909]], ['Backslash', [8726]], ['Barv', [10983]], ['barvee', [8893]], ['barwed', [8965]], ['Barwed', [8966]], ['barwedge', [8965]], ['bbrk', [9141]], ['bbrktbrk', [9142]], ['bcong', [8780]], ['Bcy', [1041]], ['bcy', [1073]], ['bdquo', [8222]], ['becaus', [8757]], ['because', [8757]], ['Because', [8757]], ['bemptyv', [10672]], ['bepsi', [1014]], ['bernou', [8492]], ['Bernoullis', [8492]], ['Beta', [914]], ['beta', [946]], ['beth', [8502]], ['between', [8812]], ['Bfr', [120069]], ['bfr', [120095]], ['bigcap', [8898]], ['bigcirc', [9711]], ['bigcup', [8899]], ['bigodot', [10752]], ['bigoplus', [10753]], ['bigotimes', [10754]], ['bigsqcup', [10758]], ['bigstar', [9733]], ['bigtriangledown', [9661]], ['bigtriangleup', [9651]], ['biguplus', [10756]], ['bigvee', [8897]], ['bigwedge', [8896]], ['bkarow', [10509]], ['blacklozenge', [10731]], ['blacksquare', [9642]], ['blacktriangle', [9652]], ['blacktriangledown', [9662]], ['blacktriangleleft', [9666]], ['blacktriangleright', [9656]], ['blank', [9251]], ['blk12', [9618]], ['blk14', [9617]], ['blk34', [9619]], ['block', [9608]], ['bne', [61, 8421]], ['bnequiv', [8801, 8421]], ['bNot', [10989]], ['bnot', [8976]], ['Bopf', [120121]], ['bopf', [120147]], ['bot', [8869]], ['bottom', [8869]], ['bowtie', [8904]], ['boxbox', [10697]], ['boxdl', [9488]], ['boxdL', [9557]], ['boxDl', [9558]], ['boxDL', [9559]], ['boxdr', [9484]], ['boxdR', [9554]], ['boxDr', [9555]], ['boxDR', [9556]], ['boxh', [9472]], ['boxH', [9552]], ['boxhd', [9516]], ['boxHd', [9572]], ['boxhD', [9573]], ['boxHD', [9574]], ['boxhu', [9524]], ['boxHu', [9575]], ['boxhU', [9576]], ['boxHU', [9577]], ['boxminus', [8863]], ['boxplus', [8862]], ['boxtimes', [8864]], ['boxul', [9496]], ['boxuL', [9563]], ['boxUl', [9564]], ['boxUL', [9565]], ['boxur', [9492]], ['boxuR', [9560]], ['boxUr', [9561]], ['boxUR', [9562]], ['boxv', [9474]], ['boxV', [9553]], ['boxvh', [9532]], ['boxvH', [9578]], ['boxVh', [9579]], ['boxVH', [9580]], ['boxvl', [9508]], ['boxvL', [9569]], ['boxVl', [9570]], ['boxVL', [9571]], ['boxvr', [9500]], ['boxvR', [9566]], ['boxVr', [9567]], ['boxVR', [9568]], ['bprime', [8245]], ['breve', [728]], ['Breve', [728]], ['brvbar', [166]], ['bscr', [119991]], ['Bscr', [8492]], ['bsemi', [8271]], ['bsim', [8765]], ['bsime', [8909]], ['bsolb', [10693]], ['bsol', [92]], ['bsolhsub', [10184]], ['bull', [8226]], ['bullet', [8226]], ['bump', [8782]], ['bumpE', [10926]], ['bumpe', [8783]], ['Bumpeq', [8782]], ['bumpeq', [8783]], ['Cacute', [262]], ['cacute', [263]], ['capand', [10820]], ['capbrcup', [10825]], ['capcap', [10827]], ['cap', [8745]], ['Cap', [8914]], ['capcup', [10823]], ['capdot', [10816]], ['CapitalDifferentialD', [8517]], ['caps', [8745, 65024]], ['caret', [8257]], ['caron', [711]], ['Cayleys', [8493]], ['ccaps', [10829]], ['Ccaron', [268]], ['ccaron', [269]], ['Ccedil', [199]], ['ccedil', [231]], ['Ccirc', [264]], ['ccirc', [265]], ['Cconint', [8752]], ['ccups', [10828]], ['ccupssm', [10832]], ['Cdot', [266]], ['cdot', [267]], ['cedil', [184]], ['Cedilla', [184]], ['cemptyv', [10674]], ['cent', [162]], ['centerdot', [183]], ['CenterDot', [183]], ['cfr', [120096]], ['Cfr', [8493]], ['CHcy', [1063]], ['chcy', [1095]], ['check', [10003]], ['checkmark', [10003]], ['Chi', [935]], ['chi', [967]], ['circ', [710]], ['circeq', [8791]], ['circlearrowleft', [8634]], ['circlearrowright', [8635]], ['circledast', [8859]], ['circledcirc', [8858]], ['circleddash', [8861]], ['CircleDot', [8857]], ['circledR', [174]], ['circledS', [9416]], ['CircleMinus', [8854]], ['CirclePlus', [8853]], ['CircleTimes', [8855]], ['cir', [9675]], ['cirE', [10691]], ['cire', [8791]], ['cirfnint', [10768]], ['cirmid', [10991]], ['cirscir', [10690]], ['ClockwiseContourIntegral', [8754]], ['CloseCurlyDoubleQuote', [8221]], ['CloseCurlyQuote', [8217]], ['clubs', [9827]], ['clubsuit', [9827]], ['colon', [58]], ['Colon', [8759]], ['Colone', [10868]], ['colone', [8788]], ['coloneq', [8788]], ['comma', [44]], ['commat', [64]], ['comp', [8705]], ['compfn', [8728]], ['complement', [8705]], ['complexes', [8450]], ['cong', [8773]], ['congdot', [10861]], ['Congruent', [8801]], ['conint', [8750]], ['Conint', [8751]], ['ContourIntegral', [8750]], ['copf', [120148]], ['Copf', [8450]], ['coprod', [8720]], ['Coproduct', [8720]], ['copy', [169]], ['COPY', [169]], ['copysr', [8471]], ['CounterClockwiseContourIntegral', [8755]], ['crarr', [8629]], ['cross', [10007]], ['Cross', [10799]], ['Cscr', [119966]], ['cscr', [119992]], ['csub', [10959]], ['csube', [10961]], ['csup', [10960]], ['csupe', [10962]], ['ctdot', [8943]], ['cudarrl', [10552]], ['cudarrr', [10549]], ['cuepr', [8926]], ['cuesc', [8927]], ['cularr', [8630]], ['cularrp', [10557]], ['cupbrcap', [10824]], ['cupcap', [10822]], ['CupCap', [8781]], ['cup', [8746]], ['Cup', [8915]], ['cupcup', [10826]], ['cupdot', [8845]], ['cupor', [10821]], ['cups', [8746, 65024]], ['curarr', [8631]], ['curarrm', [10556]], ['curlyeqprec', [8926]], ['curlyeqsucc', [8927]], ['curlyvee', [8910]], ['curlywedge', [8911]], ['curren', [164]], ['curvearrowleft', [8630]], ['curvearrowright', [8631]], ['cuvee', [8910]], ['cuwed', [8911]], ['cwconint', [8754]], ['cwint', [8753]], ['cylcty', [9005]], ['dagger', [8224]], ['Dagger', [8225]], ['daleth', [8504]], ['darr', [8595]], ['Darr', [8609]], ['dArr', [8659]], ['dash', [8208]], ['Dashv', [10980]], ['dashv', [8867]], ['dbkarow', [10511]], ['dblac', [733]], ['Dcaron', [270]], ['dcaron', [271]], ['Dcy', [1044]], ['dcy', [1076]], ['ddagger', [8225]], ['ddarr', [8650]], ['DD', [8517]], ['dd', [8518]], ['DDotrahd', [10513]], ['ddotseq', [10871]], ['deg', [176]], ['Del', [8711]], ['Delta', [916]], ['delta', [948]], ['demptyv', [10673]], ['dfisht', [10623]], ['Dfr', [120071]], ['dfr', [120097]], ['dHar', [10597]], ['dharl', [8643]], ['dharr', [8642]], ['DiacriticalAcute', [180]], ['DiacriticalDot', [729]], ['DiacriticalDoubleAcute', [733]], ['DiacriticalGrave', [96]], ['DiacriticalTilde', [732]], ['diam', [8900]], ['diamond', [8900]], ['Diamond', [8900]], ['diamondsuit', [9830]], ['diams', [9830]], ['die', [168]], ['DifferentialD', [8518]], ['digamma', [989]], ['disin', [8946]], ['div', [247]], ['divide', [247]], ['divideontimes', [8903]], ['divonx', [8903]], ['DJcy', [1026]], ['djcy', [1106]], ['dlcorn', [8990]], ['dlcrop', [8973]], ['dollar', [36]], ['Dopf', [120123]], ['dopf', [120149]], ['Dot', [168]], ['dot', [729]], ['DotDot', [8412]], ['doteq', [8784]], ['doteqdot', [8785]], ['DotEqual', [8784]], ['dotminus', [8760]], ['dotplus', [8724]], ['dotsquare', [8865]], ['doublebarwedge', [8966]], ['DoubleContourIntegral', [8751]], ['DoubleDot', [168]], ['DoubleDownArrow', [8659]], ['DoubleLeftArrow', [8656]], ['DoubleLeftRightArrow', [8660]], ['DoubleLeftTee', [10980]], ['DoubleLongLeftArrow', [10232]], ['DoubleLongLeftRightArrow', [10234]], ['DoubleLongRightArrow', [10233]], ['DoubleRightArrow', [8658]], ['DoubleRightTee', [8872]], ['DoubleUpArrow', [8657]], ['DoubleUpDownArrow', [8661]], ['DoubleVerticalBar', [8741]], ['DownArrowBar', [10515]], ['downarrow', [8595]], ['DownArrow', [8595]], ['Downarrow', [8659]], ['DownArrowUpArrow', [8693]], ['DownBreve', [785]], ['downdownarrows', [8650]], ['downharpoonleft', [8643]], ['downharpoonright', [8642]], ['DownLeftRightVector', [10576]], ['DownLeftTeeVector', [10590]], ['DownLeftVectorBar', [10582]], ['DownLeftVector', [8637]], ['DownRightTeeVector', [10591]], ['DownRightVectorBar', [10583]], ['DownRightVector', [8641]], ['DownTeeArrow', [8615]], ['DownTee', [8868]], ['drbkarow', [10512]], ['drcorn', [8991]], ['drcrop', [8972]], ['Dscr', [119967]], ['dscr', [119993]], ['DScy', [1029]], ['dscy', [1109]], ['dsol', [10742]], ['Dstrok', [272]], ['dstrok', [273]], ['dtdot', [8945]], ['dtri', [9663]], ['dtrif', [9662]], ['duarr', [8693]], ['duhar', [10607]], ['dwangle', [10662]], ['DZcy', [1039]], ['dzcy', [1119]], ['dzigrarr', [10239]], ['Eacute', [201]], ['eacute', [233]], ['easter', [10862]], ['Ecaron', [282]], ['ecaron', [283]], ['Ecirc', [202]], ['ecirc', [234]], ['ecir', [8790]], ['ecolon', [8789]], ['Ecy', [1069]], ['ecy', [1101]], ['eDDot', [10871]], ['Edot', [278]], ['edot', [279]], ['eDot', [8785]], ['ee', [8519]], ['efDot', [8786]], ['Efr', [120072]], ['efr', [120098]], ['eg', [10906]], ['Egrave', [200]], ['egrave', [232]], ['egs', [10902]], ['egsdot', [10904]], ['el', [10905]], ['Element', [8712]], ['elinters', [9191]], ['ell', [8467]], ['els', [10901]], ['elsdot', [10903]], ['Emacr', [274]], ['emacr', [275]], ['empty', [8709]], ['emptyset', [8709]], ['EmptySmallSquare', [9723]], ['emptyv', [8709]], ['EmptyVerySmallSquare', [9643]], ['emsp13', [8196]], ['emsp14', [8197]], ['emsp', [8195]], ['ENG', [330]], ['eng', [331]], ['ensp', [8194]], ['Eogon', [280]], ['eogon', [281]], ['Eopf', [120124]], ['eopf', [120150]], ['epar', [8917]], ['eparsl', [10723]], ['eplus', [10865]], ['epsi', [949]], ['Epsilon', [917]], ['epsilon', [949]], ['epsiv', [1013]], ['eqcirc', [8790]], ['eqcolon', [8789]], ['eqsim', [8770]], ['eqslantgtr', [10902]], ['eqslantless', [10901]], ['Equal', [10869]], ['equals', [61]], ['EqualTilde', [8770]], ['equest', [8799]], ['Equilibrium', [8652]], ['equiv', [8801]], ['equivDD', [10872]], ['eqvparsl', [10725]], ['erarr', [10609]], ['erDot', [8787]], ['escr', [8495]], ['Escr', [8496]], ['esdot', [8784]], ['Esim', [10867]], ['esim', [8770]], ['Eta', [919]], ['eta', [951]], ['ETH', [208]], ['eth', [240]], ['Euml', [203]], ['euml', [235]], ['euro', [8364]], ['excl', [33]], ['exist', [8707]], ['Exists', [8707]], ['expectation', [8496]], ['exponentiale', [8519]], ['ExponentialE', [8519]], ['fallingdotseq', [8786]], ['Fcy', [1060]], ['fcy', [1092]], ['female', [9792]], ['ffilig', [64259]], ['fflig', [64256]], ['ffllig', [64260]], ['Ffr', [120073]], ['ffr', [120099]], ['filig', [64257]], ['FilledSmallSquare', [9724]], ['FilledVerySmallSquare', [9642]], ['fjlig', [102, 106]], ['flat', [9837]], ['fllig', [64258]], ['fltns', [9649]], ['fnof', [402]], ['Fopf', [120125]], ['fopf', [120151]], ['forall', [8704]], ['ForAll', [8704]], ['fork', [8916]], ['forkv', [10969]], ['Fouriertrf', [8497]], ['fpartint', [10765]], ['frac12', [189]], ['frac13', [8531]], ['frac14', [188]], ['frac15', [8533]], ['frac16', [8537]], ['frac18', [8539]], ['frac23', [8532]], ['frac25', [8534]], ['frac34', [190]], ['frac35', [8535]], ['frac38', [8540]], ['frac45', [8536]], ['frac56', [8538]], ['frac58', [8541]], ['frac78', [8542]], ['frasl', [8260]], ['frown', [8994]], ['fscr', [119995]], ['Fscr', [8497]], ['gacute', [501]], ['Gamma', [915]], ['gamma', [947]], ['Gammad', [988]], ['gammad', [989]], ['gap', [10886]], ['Gbreve', [286]], ['gbreve', [287]], ['Gcedil', [290]], ['Gcirc', [284]], ['gcirc', [285]], ['Gcy', [1043]], ['gcy', [1075]], ['Gdot', [288]], ['gdot', [289]], ['ge', [8805]], ['gE', [8807]], ['gEl', [10892]], ['gel', [8923]], ['geq', [8805]], ['geqq', [8807]], ['geqslant', [10878]], ['gescc', [10921]], ['ges', [10878]], ['gesdot', [10880]], ['gesdoto', [10882]], ['gesdotol', [10884]], ['gesl', [8923, 65024]], ['gesles', [10900]], ['Gfr', [120074]], ['gfr', [120100]], ['gg', [8811]], ['Gg', [8921]], ['ggg', [8921]], ['gimel', [8503]], ['GJcy', [1027]], ['gjcy', [1107]], ['gla', [10917]], ['gl', [8823]], ['glE', [10898]], ['glj', [10916]], ['gnap', [10890]], ['gnapprox', [10890]], ['gne', [10888]], ['gnE', [8809]], ['gneq', [10888]], ['gneqq', [8809]], ['gnsim', [8935]], ['Gopf', [120126]], ['gopf', [120152]], ['grave', [96]], ['GreaterEqual', [8805]], ['GreaterEqualLess', [8923]], ['GreaterFullEqual', [8807]], ['GreaterGreater', [10914]], ['GreaterLess', [8823]], ['GreaterSlantEqual', [10878]], ['GreaterTilde', [8819]], ['Gscr', [119970]], ['gscr', [8458]], ['gsim', [8819]], ['gsime', [10894]], ['gsiml', [10896]], ['gtcc', [10919]], ['gtcir', [10874]], ['gt', [62]], ['GT', [62]], ['Gt', [8811]], ['gtdot', [8919]], ['gtlPar', [10645]], ['gtquest', [10876]], ['gtrapprox', [10886]], ['gtrarr', [10616]], ['gtrdot', [8919]], ['gtreqless', [8923]], ['gtreqqless', [10892]], ['gtrless', [8823]], ['gtrsim', [8819]], ['gvertneqq', [8809, 65024]], ['gvnE', [8809, 65024]], ['Hacek', [711]], ['hairsp', [8202]], ['half', [189]], ['hamilt', [8459]], ['HARDcy', [1066]], ['hardcy', [1098]], ['harrcir', [10568]], ['harr', [8596]], ['hArr', [8660]], ['harrw', [8621]], ['Hat', [94]], ['hbar', [8463]], ['Hcirc', [292]], ['hcirc', [293]], ['hearts', [9829]], ['heartsuit', [9829]], ['hellip', [8230]], ['hercon', [8889]], ['hfr', [120101]], ['Hfr', [8460]], ['HilbertSpace', [8459]], ['hksearow', [10533]], ['hkswarow', [10534]], ['hoarr', [8703]], ['homtht', [8763]], ['hookleftarrow', [8617]], ['hookrightarrow', [8618]], ['hopf', [120153]], ['Hopf', [8461]], ['horbar', [8213]], ['HorizontalLine', [9472]], ['hscr', [119997]], ['Hscr', [8459]], ['hslash', [8463]], ['Hstrok', [294]], ['hstrok', [295]], ['HumpDownHump', [8782]], ['HumpEqual', [8783]], ['hybull', [8259]], ['hyphen', [8208]], ['Iacute', [205]], ['iacute', [237]], ['ic', [8291]], ['Icirc', [206]], ['icirc', [238]], ['Icy', [1048]], ['icy', [1080]], ['Idot', [304]], ['IEcy', [1045]], ['iecy', [1077]], ['iexcl', [161]], ['iff', [8660]], ['ifr', [120102]], ['Ifr', [8465]], ['Igrave', [204]], ['igrave', [236]], ['ii', [8520]], ['iiiint', [10764]], ['iiint', [8749]], ['iinfin', [10716]], ['iiota', [8489]], ['IJlig', [306]], ['ijlig', [307]], ['Imacr', [298]], ['imacr', [299]], ['image', [8465]], ['ImaginaryI', [8520]], ['imagline', [8464]], ['imagpart', [8465]], ['imath', [305]], ['Im', [8465]], ['imof', [8887]], ['imped', [437]], ['Implies', [8658]], ['incare', [8453]], ['in', [8712]], ['infin', [8734]], ['infintie', [10717]], ['inodot', [305]], ['intcal', [8890]], ['int', [8747]], ['Int', [8748]], ['integers', [8484]], ['Integral', [8747]], ['intercal', [8890]], ['Intersection', [8898]], ['intlarhk', [10775]], ['intprod', [10812]], ['InvisibleComma', [8291]], ['InvisibleTimes', [8290]], ['IOcy', [1025]], ['iocy', [1105]], ['Iogon', [302]], ['iogon', [303]], ['Iopf', [120128]], ['iopf', [120154]], ['Iota', [921]], ['iota', [953]], ['iprod', [10812]], ['iquest', [191]], ['iscr', [119998]], ['Iscr', [8464]], ['isin', [8712]], ['isindot', [8949]], ['isinE', [8953]], ['isins', [8948]], ['isinsv', [8947]], ['isinv', [8712]], ['it', [8290]], ['Itilde', [296]], ['itilde', [297]], ['Iukcy', [1030]], ['iukcy', [1110]], ['Iuml', [207]], ['iuml', [239]], ['Jcirc', [308]], ['jcirc', [309]], ['Jcy', [1049]], ['jcy', [1081]], ['Jfr', [120077]], ['jfr', [120103]], ['jmath', [567]], ['Jopf', [120129]], ['jopf', [120155]], ['Jscr', [119973]], ['jscr', [119999]], ['Jsercy', [1032]], ['jsercy', [1112]], ['Jukcy', [1028]], ['jukcy', [1108]], ['Kappa', [922]], ['kappa', [954]], ['kappav', [1008]], ['Kcedil', [310]], ['kcedil', [311]], ['Kcy', [1050]], ['kcy', [1082]], ['Kfr', [120078]], ['kfr', [120104]], ['kgreen', [312]], ['KHcy', [1061]], ['khcy', [1093]], ['KJcy', [1036]], ['kjcy', [1116]], ['Kopf', [120130]], ['kopf', [120156]], ['Kscr', [119974]], ['kscr', [120000]], ['lAarr', [8666]], ['Lacute', [313]], ['lacute', [314]], ['laemptyv', [10676]], ['lagran', [8466]], ['Lambda', [923]], ['lambda', [955]], ['lang', [10216]], ['Lang', [10218]], ['langd', [10641]], ['langle', [10216]], ['lap', [10885]], ['Laplacetrf', [8466]], ['laquo', [171]], ['larrb', [8676]], ['larrbfs', [10527]], ['larr', [8592]], ['Larr', [8606]], ['lArr', [8656]], ['larrfs', [10525]], ['larrhk', [8617]], ['larrlp', [8619]], ['larrpl', [10553]], ['larrsim', [10611]], ['larrtl', [8610]], ['latail', [10521]], ['lAtail', [10523]], ['lat', [10923]], ['late', [10925]], ['lates', [10925, 65024]], ['lbarr', [10508]], ['lBarr', [10510]], ['lbbrk', [10098]], ['lbrace', [123]], ['lbrack', [91]], ['lbrke', [10635]], ['lbrksld', [10639]], ['lbrkslu', [10637]], ['Lcaron', [317]], ['lcaron', [318]], ['Lcedil', [315]], ['lcedil', [316]], ['lceil', [8968]], ['lcub', [123]], ['Lcy', [1051]], ['lcy', [1083]], ['ldca', [10550]], ['ldquo', [8220]], ['ldquor', [8222]], ['ldrdhar', [10599]], ['ldrushar', [10571]], ['ldsh', [8626]], ['le', [8804]], ['lE', [8806]], ['LeftAngleBracket', [10216]], ['LeftArrowBar', [8676]], ['leftarrow', [8592]], ['LeftArrow', [8592]], ['Leftarrow', [8656]], ['LeftArrowRightArrow', [8646]], ['leftarrowtail', [8610]], ['LeftCeiling', [8968]], ['LeftDoubleBracket', [10214]], ['LeftDownTeeVector', [10593]], ['LeftDownVectorBar', [10585]], ['LeftDownVector', [8643]], ['LeftFloor', [8970]], ['leftharpoondown', [8637]], ['leftharpoonup', [8636]], ['leftleftarrows', [8647]], ['leftrightarrow', [8596]], ['LeftRightArrow', [8596]], ['Leftrightarrow', [8660]], ['leftrightarrows', [8646]], ['leftrightharpoons', [8651]], ['leftrightsquigarrow', [8621]], ['LeftRightVector', [10574]], ['LeftTeeArrow', [8612]], ['LeftTee', [8867]], ['LeftTeeVector', [10586]], ['leftthreetimes', [8907]], ['LeftTriangleBar', [10703]], ['LeftTriangle', [8882]], ['LeftTriangleEqual', [8884]], ['LeftUpDownVector', [10577]], ['LeftUpTeeVector', [10592]], ['LeftUpVectorBar', [10584]], ['LeftUpVector', [8639]], ['LeftVectorBar', [10578]], ['LeftVector', [8636]], ['lEg', [10891]], ['leg', [8922]], ['leq', [8804]], ['leqq', [8806]], ['leqslant', [10877]], ['lescc', [10920]], ['les', [10877]], ['lesdot', [10879]], ['lesdoto', [10881]], ['lesdotor', [10883]], ['lesg', [8922, 65024]], ['lesges', [10899]], ['lessapprox', [10885]], ['lessdot', [8918]], ['lesseqgtr', [8922]], ['lesseqqgtr', [10891]], ['LessEqualGreater', [8922]], ['LessFullEqual', [8806]], ['LessGreater', [8822]], ['lessgtr', [8822]], ['LessLess', [10913]], ['lesssim', [8818]], ['LessSlantEqual', [10877]], ['LessTilde', [8818]], ['lfisht', [10620]], ['lfloor', [8970]], ['Lfr', [120079]], ['lfr', [120105]], ['lg', [8822]], ['lgE', [10897]], ['lHar', [10594]], ['lhard', [8637]], ['lharu', [8636]], ['lharul', [10602]], ['lhblk', [9604]], ['LJcy', [1033]], ['ljcy', [1113]], ['llarr', [8647]], ['ll', [8810]], ['Ll', [8920]], ['llcorner', [8990]], ['Lleftarrow', [8666]], ['llhard', [10603]], ['lltri', [9722]], ['Lmidot', [319]], ['lmidot', [320]], ['lmoustache', [9136]], ['lmoust', [9136]], ['lnap', [10889]], ['lnapprox', [10889]], ['lne', [10887]], ['lnE', [8808]], ['lneq', [10887]], ['lneqq', [8808]], ['lnsim', [8934]], ['loang', [10220]], ['loarr', [8701]], ['lobrk', [10214]], ['longleftarrow', [10229]], ['LongLeftArrow', [10229]], ['Longleftarrow', [10232]], ['longleftrightarrow', [10231]], ['LongLeftRightArrow', [10231]], ['Longleftrightarrow', [10234]], ['longmapsto', [10236]], ['longrightarrow', [10230]], ['LongRightArrow', [10230]], ['Longrightarrow', [10233]], ['looparrowleft', [8619]], ['looparrowright', [8620]], ['lopar', [10629]], ['Lopf', [120131]], ['lopf', [120157]], ['loplus', [10797]], ['lotimes', [10804]], ['lowast', [8727]], ['lowbar', [95]], ['LowerLeftArrow', [8601]], ['LowerRightArrow', [8600]], ['loz', [9674]], ['lozenge', [9674]], ['lozf', [10731]], ['lpar', [40]], ['lparlt', [10643]], ['lrarr', [8646]], ['lrcorner', [8991]], ['lrhar', [8651]], ['lrhard', [10605]], ['lrm', [8206]], ['lrtri', [8895]], ['lsaquo', [8249]], ['lscr', [120001]], ['Lscr', [8466]], ['lsh', [8624]], ['Lsh', [8624]], ['lsim', [8818]], ['lsime', [10893]], ['lsimg', [10895]], ['lsqb', [91]], ['lsquo', [8216]], ['lsquor', [8218]], ['Lstrok', [321]], ['lstrok', [322]], ['ltcc', [10918]], ['ltcir', [10873]], ['lt', [60]], ['LT', [60]], ['Lt', [8810]], ['ltdot', [8918]], ['lthree', [8907]], ['ltimes', [8905]], ['ltlarr', [10614]], ['ltquest', [10875]], ['ltri', [9667]], ['ltrie', [8884]], ['ltrif', [9666]], ['ltrPar', [10646]], ['lurdshar', [10570]], ['luruhar', [10598]], ['lvertneqq', [8808, 65024]], ['lvnE', [8808, 65024]], ['macr', [175]], ['male', [9794]], ['malt', [10016]], ['maltese', [10016]], ['Map', [10501]], ['map', [8614]], ['mapsto', [8614]], ['mapstodown', [8615]], ['mapstoleft', [8612]], ['mapstoup', [8613]], ['marker', [9646]], ['mcomma', [10793]], ['Mcy', [1052]], ['mcy', [1084]], ['mdash', [8212]], ['mDDot', [8762]], ['measuredangle', [8737]], ['MediumSpace', [8287]], ['Mellintrf', [8499]], ['Mfr', [120080]], ['mfr', [120106]], ['mho', [8487]], ['micro', [181]], ['midast', [42]], ['midcir', [10992]], ['mid', [8739]], ['middot', [183]], ['minusb', [8863]], ['minus', [8722]], ['minusd', [8760]], ['minusdu', [10794]], ['MinusPlus', [8723]], ['mlcp', [10971]], ['mldr', [8230]], ['mnplus', [8723]], ['models', [8871]], ['Mopf', [120132]], ['mopf', [120158]], ['mp', [8723]], ['mscr', [120002]], ['Mscr', [8499]], ['mstpos', [8766]], ['Mu', [924]], ['mu', [956]], ['multimap', [8888]], ['mumap', [8888]], ['nabla', [8711]], ['Nacute', [323]], ['nacute', [324]], ['nang', [8736, 8402]], ['nap', [8777]], ['napE', [10864, 824]], ['napid', [8779, 824]], ['napos', [329]], ['napprox', [8777]], ['natural', [9838]], ['naturals', [8469]], ['natur', [9838]], ['nbsp', [160]], ['nbump', [8782, 824]], ['nbumpe', [8783, 824]], ['ncap', [10819]], ['Ncaron', [327]], ['ncaron', [328]], ['Ncedil', [325]], ['ncedil', [326]], ['ncong', [8775]], ['ncongdot', [10861, 824]], ['ncup', [10818]], ['Ncy', [1053]], ['ncy', [1085]], ['ndash', [8211]], ['nearhk', [10532]], ['nearr', [8599]], ['neArr', [8663]], ['nearrow', [8599]], ['ne', [8800]], ['nedot', [8784, 824]], ['NegativeMediumSpace', [8203]], ['NegativeThickSpace', [8203]], ['NegativeThinSpace', [8203]], ['NegativeVeryThinSpace', [8203]], ['nequiv', [8802]], ['nesear', [10536]], ['nesim', [8770, 824]], ['NestedGreaterGreater', [8811]], ['NestedLessLess', [8810]], ['nexist', [8708]], ['nexists', [8708]], ['Nfr', [120081]], ['nfr', [120107]], ['ngE', [8807, 824]], ['nge', [8817]], ['ngeq', [8817]], ['ngeqq', [8807, 824]], ['ngeqslant', [10878, 824]], ['nges', [10878, 824]], ['nGg', [8921, 824]], ['ngsim', [8821]], ['nGt', [8811, 8402]], ['ngt', [8815]], ['ngtr', [8815]], ['nGtv', [8811, 824]], ['nharr', [8622]], ['nhArr', [8654]], ['nhpar', [10994]], ['ni', [8715]], ['nis', [8956]], ['nisd', [8954]], ['niv', [8715]], ['NJcy', [1034]], ['njcy', [1114]], ['nlarr', [8602]], ['nlArr', [8653]], ['nldr', [8229]], ['nlE', [8806, 824]], ['nle', [8816]], ['nleftarrow', [8602]], ['nLeftarrow', [8653]], ['nleftrightarrow', [8622]], ['nLeftrightarrow', [8654]], ['nleq', [8816]], ['nleqq', [8806, 824]], ['nleqslant', [10877, 824]], ['nles', [10877, 824]], ['nless', [8814]], ['nLl', [8920, 824]], ['nlsim', [8820]], ['nLt', [8810, 8402]], ['nlt', [8814]], ['nltri', [8938]], ['nltrie', [8940]], ['nLtv', [8810, 824]], ['nmid', [8740]], ['NoBreak', [8288]], ['NonBreakingSpace', [160]], ['nopf', [120159]], ['Nopf', [8469]], ['Not', [10988]], ['not', [172]], ['NotCongruent', [8802]], ['NotCupCap', [8813]], ['NotDoubleVerticalBar', [8742]], ['NotElement', [8713]], ['NotEqual', [8800]], ['NotEqualTilde', [8770, 824]], ['NotExists', [8708]], ['NotGreater', [8815]], ['NotGreaterEqual', [8817]], ['NotGreaterFullEqual', [8807, 824]], ['NotGreaterGreater', [8811, 824]], ['NotGreaterLess', [8825]], ['NotGreaterSlantEqual', [10878, 824]], ['NotGreaterTilde', [8821]], ['NotHumpDownHump', [8782, 824]], ['NotHumpEqual', [8783, 824]], ['notin', [8713]], ['notindot', [8949, 824]], ['notinE', [8953, 824]], ['notinva', [8713]], ['notinvb', [8951]], ['notinvc', [8950]], ['NotLeftTriangleBar', [10703, 824]], ['NotLeftTriangle', [8938]], ['NotLeftTriangleEqual', [8940]], ['NotLess', [8814]], ['NotLessEqual', [8816]], ['NotLessGreater', [8824]], ['NotLessLess', [8810, 824]], ['NotLessSlantEqual', [10877, 824]], ['NotLessTilde', [8820]], ['NotNestedGreaterGreater', [10914, 824]], ['NotNestedLessLess', [10913, 824]], ['notni', [8716]], ['notniva', [8716]], ['notnivb', [8958]], ['notnivc', [8957]], ['NotPrecedes', [8832]], ['NotPrecedesEqual', [10927, 824]], ['NotPrecedesSlantEqual', [8928]], ['NotReverseElement', [8716]], ['NotRightTriangleBar', [10704, 824]], ['NotRightTriangle', [8939]], ['NotRightTriangleEqual', [8941]], ['NotSquareSubset', [8847, 824]], ['NotSquareSubsetEqual', [8930]], ['NotSquareSuperset', [8848, 824]], ['NotSquareSupersetEqual', [8931]], ['NotSubset', [8834, 8402]], ['NotSubsetEqual', [8840]], ['NotSucceeds', [8833]], ['NotSucceedsEqual', [10928, 824]], ['NotSucceedsSlantEqual', [8929]], ['NotSucceedsTilde', [8831, 824]], ['NotSuperset', [8835, 8402]], ['NotSupersetEqual', [8841]], ['NotTilde', [8769]], ['NotTildeEqual', [8772]], ['NotTildeFullEqual', [8775]], ['NotTildeTilde', [8777]], ['NotVerticalBar', [8740]], ['nparallel', [8742]], ['npar', [8742]], ['nparsl', [11005, 8421]], ['npart', [8706, 824]], ['npolint', [10772]], ['npr', [8832]], ['nprcue', [8928]], ['nprec', [8832]], ['npreceq', [10927, 824]], ['npre', [10927, 824]], ['nrarrc', [10547, 824]], ['nrarr', [8603]], ['nrArr', [8655]], ['nrarrw', [8605, 824]], ['nrightarrow', [8603]], ['nRightarrow', [8655]], ['nrtri', [8939]], ['nrtrie', [8941]], ['nsc', [8833]], ['nsccue', [8929]], ['nsce', [10928, 824]], ['Nscr', [119977]], ['nscr', [120003]], ['nshortmid', [8740]], ['nshortparallel', [8742]], ['nsim', [8769]], ['nsime', [8772]], ['nsimeq', [8772]], ['nsmid', [8740]], ['nspar', [8742]], ['nsqsube', [8930]], ['nsqsupe', [8931]], ['nsub', [8836]], ['nsubE', [10949, 824]], ['nsube', [8840]], ['nsubset', [8834, 8402]], ['nsubseteq', [8840]], ['nsubseteqq', [10949, 824]], ['nsucc', [8833]], ['nsucceq', [10928, 824]], ['nsup', [8837]], ['nsupE', [10950, 824]], ['nsupe', [8841]], ['nsupset', [8835, 8402]], ['nsupseteq', [8841]], ['nsupseteqq', [10950, 824]], ['ntgl', [8825]], ['Ntilde', [209]], ['ntilde', [241]], ['ntlg', [8824]], ['ntriangleleft', [8938]], ['ntrianglelefteq', [8940]], ['ntriangleright', [8939]], ['ntrianglerighteq', [8941]], ['Nu', [925]], ['nu', [957]], ['num', [35]], ['numero', [8470]], ['numsp', [8199]], ['nvap', [8781, 8402]], ['nvdash', [8876]], ['nvDash', [8877]], ['nVdash', [8878]], ['nVDash', [8879]], ['nvge', [8805, 8402]], ['nvgt', [62, 8402]], ['nvHarr', [10500]], ['nvinfin', [10718]], ['nvlArr', [10498]], ['nvle', [8804, 8402]], ['nvlt', [60, 8402]], ['nvltrie', [8884, 8402]], ['nvrArr', [10499]], ['nvrtrie', [8885, 8402]], ['nvsim', [8764, 8402]], ['nwarhk', [10531]], ['nwarr', [8598]], ['nwArr', [8662]], ['nwarrow', [8598]], ['nwnear', [10535]], ['Oacute', [211]], ['oacute', [243]], ['oast', [8859]], ['Ocirc', [212]], ['ocirc', [244]], ['ocir', [8858]], ['Ocy', [1054]], ['ocy', [1086]], ['odash', [8861]], ['Odblac', [336]], ['odblac', [337]], ['odiv', [10808]], ['odot', [8857]], ['odsold', [10684]], ['OElig', [338]], ['oelig', [339]], ['ofcir', [10687]], ['Ofr', [120082]], ['ofr', [120108]], ['ogon', [731]], ['Ograve', [210]], ['ograve', [242]], ['ogt', [10689]], ['ohbar', [10677]], ['ohm', [937]], ['oint', [8750]], ['olarr', [8634]], ['olcir', [10686]], ['olcross', [10683]], ['oline', [8254]], ['olt', [10688]], ['Omacr', [332]], ['omacr', [333]], ['Omega', [937]], ['omega', [969]], ['Omicron', [927]], ['omicron', [959]], ['omid', [10678]], ['ominus', [8854]], ['Oopf', [120134]], ['oopf', [120160]], ['opar', [10679]], ['OpenCurlyDoubleQuote', [8220]], ['OpenCurlyQuote', [8216]], ['operp', [10681]], ['oplus', [8853]], ['orarr', [8635]], ['Or', [10836]], ['or', [8744]], ['ord', [10845]], ['order', [8500]], ['orderof', [8500]], ['ordf', [170]], ['ordm', [186]], ['origof', [8886]], ['oror', [10838]], ['orslope', [10839]], ['orv', [10843]], ['oS', [9416]], ['Oscr', [119978]], ['oscr', [8500]], ['Oslash', [216]], ['oslash', [248]], ['osol', [8856]], ['Otilde', [213]], ['otilde', [245]], ['otimesas', [10806]], ['Otimes', [10807]], ['otimes', [8855]], ['Ouml', [214]], ['ouml', [246]], ['ovbar', [9021]], ['OverBar', [8254]], ['OverBrace', [9182]], ['OverBracket', [9140]], ['OverParenthesis', [9180]], ['para', [182]], ['parallel', [8741]], ['par', [8741]], ['parsim', [10995]], ['parsl', [11005]], ['part', [8706]], ['PartialD', [8706]], ['Pcy', [1055]], ['pcy', [1087]], ['percnt', [37]], ['period', [46]], ['permil', [8240]], ['perp', [8869]], ['pertenk', [8241]], ['Pfr', [120083]], ['pfr', [120109]], ['Phi', [934]], ['phi', [966]], ['phiv', [981]], ['phmmat', [8499]], ['phone', [9742]], ['Pi', [928]], ['pi', [960]], ['pitchfork', [8916]], ['piv', [982]], ['planck', [8463]], ['planckh', [8462]], ['plankv', [8463]], ['plusacir', [10787]], ['plusb', [8862]], ['pluscir', [10786]], ['plus', [43]], ['plusdo', [8724]], ['plusdu', [10789]], ['pluse', [10866]], ['PlusMinus', [177]], ['plusmn', [177]], ['plussim', [10790]], ['plustwo', [10791]], ['pm', [177]], ['Poincareplane', [8460]], ['pointint', [10773]], ['popf', [120161]], ['Popf', [8473]], ['pound', [163]], ['prap', [10935]], ['Pr', [10939]], ['pr', [8826]], ['prcue', [8828]], ['precapprox', [10935]], ['prec', [8826]], ['preccurlyeq', [8828]], ['Precedes', [8826]], ['PrecedesEqual', [10927]], ['PrecedesSlantEqual', [8828]], ['PrecedesTilde', [8830]], ['preceq', [10927]], ['precnapprox', [10937]], ['precneqq', [10933]], ['precnsim', [8936]], ['pre', [10927]], ['prE', [10931]], ['precsim', [8830]], ['prime', [8242]], ['Prime', [8243]], ['primes', [8473]], ['prnap', [10937]], ['prnE', [10933]], ['prnsim', [8936]], ['prod', [8719]], ['Product', [8719]], ['profalar', [9006]], ['profline', [8978]], ['profsurf', [8979]], ['prop', [8733]], ['Proportional', [8733]], ['Proportion', [8759]], ['propto', [8733]], ['prsim', [8830]], ['prurel', [8880]], ['Pscr', [119979]], ['pscr', [120005]], ['Psi', [936]], ['psi', [968]], ['puncsp', [8200]], ['Qfr', [120084]], ['qfr', [120110]], ['qint', [10764]], ['qopf', [120162]], ['Qopf', [8474]], ['qprime', [8279]], ['Qscr', [119980]], ['qscr', [120006]], ['quaternions', [8461]], ['quatint', [10774]], ['quest', [63]], ['questeq', [8799]], ['quot', [34]], ['QUOT', [34]], ['rAarr', [8667]], ['race', [8765, 817]], ['Racute', [340]], ['racute', [341]], ['radic', [8730]], ['raemptyv', [10675]], ['rang', [10217]], ['Rang', [10219]], ['rangd', [10642]], ['range', [10661]], ['rangle', [10217]], ['raquo', [187]], ['rarrap', [10613]], ['rarrb', [8677]], ['rarrbfs', [10528]], ['rarrc', [10547]], ['rarr', [8594]], ['Rarr', [8608]], ['rArr', [8658]], ['rarrfs', [10526]], ['rarrhk', [8618]], ['rarrlp', [8620]], ['rarrpl', [10565]], ['rarrsim', [10612]], ['Rarrtl', [10518]], ['rarrtl', [8611]], ['rarrw', [8605]], ['ratail', [10522]], ['rAtail', [10524]], ['ratio', [8758]], ['rationals', [8474]], ['rbarr', [10509]], ['rBarr', [10511]], ['RBarr', [10512]], ['rbbrk', [10099]], ['rbrace', [125]], ['rbrack', [93]], ['rbrke', [10636]], ['rbrksld', [10638]], ['rbrkslu', [10640]], ['Rcaron', [344]], ['rcaron', [345]], ['Rcedil', [342]], ['rcedil', [343]], ['rceil', [8969]], ['rcub', [125]], ['Rcy', [1056]], ['rcy', [1088]], ['rdca', [10551]], ['rdldhar', [10601]], ['rdquo', [8221]], ['rdquor', [8221]], ['rdsh', [8627]], ['real', [8476]], ['realine', [8475]], ['realpart', [8476]], ['reals', [8477]], ['Re', [8476]], ['rect', [9645]], ['reg', [174]], ['REG', [174]], ['ReverseElement', [8715]], ['ReverseEquilibrium', [8651]], ['ReverseUpEquilibrium', [10607]], ['rfisht', [10621]], ['rfloor', [8971]], ['rfr', [120111]], ['Rfr', [8476]], ['rHar', [10596]], ['rhard', [8641]], ['rharu', [8640]], ['rharul', [10604]], ['Rho', [929]], ['rho', [961]], ['rhov', [1009]], ['RightAngleBracket', [10217]], ['RightArrowBar', [8677]], ['rightarrow', [8594]], ['RightArrow', [8594]], ['Rightarrow', [8658]], ['RightArrowLeftArrow', [8644]], ['rightarrowtail', [8611]], ['RightCeiling', [8969]], ['RightDoubleBracket', [10215]], ['RightDownTeeVector', [10589]], ['RightDownVectorBar', [10581]], ['RightDownVector', [8642]], ['RightFloor', [8971]], ['rightharpoondown', [8641]], ['rightharpoonup', [8640]], ['rightleftarrows', [8644]], ['rightleftharpoons', [8652]], ['rightrightarrows', [8649]], ['rightsquigarrow', [8605]], ['RightTeeArrow', [8614]], ['RightTee', [8866]], ['RightTeeVector', [10587]], ['rightthreetimes', [8908]], ['RightTriangleBar', [10704]], ['RightTriangle', [8883]], ['RightTriangleEqual', [8885]], ['RightUpDownVector', [10575]], ['RightUpTeeVector', [10588]], ['RightUpVectorBar', [10580]], ['RightUpVector', [8638]], ['RightVectorBar', [10579]], ['RightVector', [8640]], ['ring', [730]], ['risingdotseq', [8787]], ['rlarr', [8644]], ['rlhar', [8652]], ['rlm', [8207]], ['rmoustache', [9137]], ['rmoust', [9137]], ['rnmid', [10990]], ['roang', [10221]], ['roarr', [8702]], ['robrk', [10215]], ['ropar', [10630]], ['ropf', [120163]], ['Ropf', [8477]], ['roplus', [10798]], ['rotimes', [10805]], ['RoundImplies', [10608]], ['rpar', [41]], ['rpargt', [10644]], ['rppolint', [10770]], ['rrarr', [8649]], ['Rrightarrow', [8667]], ['rsaquo', [8250]], ['rscr', [120007]], ['Rscr', [8475]], ['rsh', [8625]], ['Rsh', [8625]], ['rsqb', [93]], ['rsquo', [8217]], ['rsquor', [8217]], ['rthree', [8908]], ['rtimes', [8906]], ['rtri', [9657]], ['rtrie', [8885]], ['rtrif', [9656]], ['rtriltri', [10702]], ['RuleDelayed', [10740]], ['ruluhar', [10600]], ['rx', [8478]], ['Sacute', [346]], ['sacute', [347]], ['sbquo', [8218]], ['scap', [10936]], ['Scaron', [352]], ['scaron', [353]], ['Sc', [10940]], ['sc', [8827]], ['sccue', [8829]], ['sce', [10928]], ['scE', [10932]], ['Scedil', [350]], ['scedil', [351]], ['Scirc', [348]], ['scirc', [349]], ['scnap', [10938]], ['scnE', [10934]], ['scnsim', [8937]], ['scpolint', [10771]], ['scsim', [8831]], ['Scy', [1057]], ['scy', [1089]], ['sdotb', [8865]], ['sdot', [8901]], ['sdote', [10854]], ['searhk', [10533]], ['searr', [8600]], ['seArr', [8664]], ['searrow', [8600]], ['sect', [167]], ['semi', [59]], ['seswar', [10537]], ['setminus', [8726]], ['setmn', [8726]], ['sext', [10038]], ['Sfr', [120086]], ['sfr', [120112]], ['sfrown', [8994]], ['sharp', [9839]], ['SHCHcy', [1065]], ['shchcy', [1097]], ['SHcy', [1064]], ['shcy', [1096]], ['ShortDownArrow', [8595]], ['ShortLeftArrow', [8592]], ['shortmid', [8739]], ['shortparallel', [8741]], ['ShortRightArrow', [8594]], ['ShortUpArrow', [8593]], ['shy', [173]], ['Sigma', [931]], ['sigma', [963]], ['sigmaf', [962]], ['sigmav', [962]], ['sim', [8764]], ['simdot', [10858]], ['sime', [8771]], ['simeq', [8771]], ['simg', [10910]], ['simgE', [10912]], ['siml', [10909]], ['simlE', [10911]], ['simne', [8774]], ['simplus', [10788]], ['simrarr', [10610]], ['slarr', [8592]], ['SmallCircle', [8728]], ['smallsetminus', [8726]], ['smashp', [10803]], ['smeparsl', [10724]], ['smid', [8739]], ['smile', [8995]], ['smt', [10922]], ['smte', [10924]], ['smtes', [10924, 65024]], ['SOFTcy', [1068]], ['softcy', [1100]], ['solbar', [9023]], ['solb', [10692]], ['sol', [47]], ['Sopf', [120138]], ['sopf', [120164]], ['spades', [9824]], ['spadesuit', [9824]], ['spar', [8741]], ['sqcap', [8851]], ['sqcaps', [8851, 65024]], ['sqcup', [8852]], ['sqcups', [8852, 65024]], ['Sqrt', [8730]], ['sqsub', [8847]], ['sqsube', [8849]], ['sqsubset', [8847]], ['sqsubseteq', [8849]], ['sqsup', [8848]], ['sqsupe', [8850]], ['sqsupset', [8848]], ['sqsupseteq', [8850]], ['square', [9633]], ['Square', [9633]], ['SquareIntersection', [8851]], ['SquareSubset', [8847]], ['SquareSubsetEqual', [8849]], ['SquareSuperset', [8848]], ['SquareSupersetEqual', [8850]], ['SquareUnion', [8852]], ['squarf', [9642]], ['squ', [9633]], ['squf', [9642]], ['srarr', [8594]], ['Sscr', [119982]], ['sscr', [120008]], ['ssetmn', [8726]], ['ssmile', [8995]], ['sstarf', [8902]], ['Star', [8902]], ['star', [9734]], ['starf', [9733]], ['straightepsilon', [1013]], ['straightphi', [981]], ['strns', [175]], ['sub', [8834]], ['Sub', [8912]], ['subdot', [10941]], ['subE', [10949]], ['sube', [8838]], ['subedot', [10947]], ['submult', [10945]], ['subnE', [10955]], ['subne', [8842]], ['subplus', [10943]], ['subrarr', [10617]], ['subset', [8834]], ['Subset', [8912]], ['subseteq', [8838]], ['subseteqq', [10949]], ['SubsetEqual', [8838]], ['subsetneq', [8842]], ['subsetneqq', [10955]], ['subsim', [10951]], ['subsub', [10965]], ['subsup', [10963]], ['succapprox', [10936]], ['succ', [8827]], ['succcurlyeq', [8829]], ['Succeeds', [8827]], ['SucceedsEqual', [10928]], ['SucceedsSlantEqual', [8829]], ['SucceedsTilde', [8831]], ['succeq', [10928]], ['succnapprox', [10938]], ['succneqq', [10934]], ['succnsim', [8937]], ['succsim', [8831]], ['SuchThat', [8715]], ['sum', [8721]], ['Sum', [8721]], ['sung', [9834]], ['sup1', [185]], ['sup2', [178]], ['sup3', [179]], ['sup', [8835]], ['Sup', [8913]], ['supdot', [10942]], ['supdsub', [10968]], ['supE', [10950]], ['supe', [8839]], ['supedot', [10948]], ['Superset', [8835]], ['SupersetEqual', [8839]], ['suphsol', [10185]], ['suphsub', [10967]], ['suplarr', [10619]], ['supmult', [10946]], ['supnE', [10956]], ['supne', [8843]], ['supplus', [10944]], ['supset', [8835]], ['Supset', [8913]], ['supseteq', [8839]], ['supseteqq', [10950]], ['supsetneq', [8843]], ['supsetneqq', [10956]], ['supsim', [10952]], ['supsub', [10964]], ['supsup', [10966]], ['swarhk', [10534]], ['swarr', [8601]], ['swArr', [8665]], ['swarrow', [8601]], ['swnwar', [10538]], ['szlig', [223]], ['Tab', [9]], ['target', [8982]], ['Tau', [932]], ['tau', [964]], ['tbrk', [9140]], ['Tcaron', [356]], ['tcaron', [357]], ['Tcedil', [354]], ['tcedil', [355]], ['Tcy', [1058]], ['tcy', [1090]], ['tdot', [8411]], ['telrec', [8981]], ['Tfr', [120087]], ['tfr', [120113]], ['there4', [8756]], ['therefore', [8756]], ['Therefore', [8756]], ['Theta', [920]], ['theta', [952]], ['thetasym', [977]], ['thetav', [977]], ['thickapprox', [8776]], ['thicksim', [8764]], ['ThickSpace', [8287, 8202]], ['ThinSpace', [8201]], ['thinsp', [8201]], ['thkap', [8776]], ['thksim', [8764]], ['THORN', [222]], ['thorn', [254]], ['tilde', [732]], ['Tilde', [8764]], ['TildeEqual', [8771]], ['TildeFullEqual', [8773]], ['TildeTilde', [8776]], ['timesbar', [10801]], ['timesb', [8864]], ['times', [215]], ['timesd', [10800]], ['tint', [8749]], ['toea', [10536]], ['topbot', [9014]], ['topcir', [10993]], ['top', [8868]], ['Topf', [120139]], ['topf', [120165]], ['topfork', [10970]], ['tosa', [10537]], ['tprime', [8244]], ['trade', [8482]], ['TRADE', [8482]], ['triangle', [9653]], ['triangledown', [9663]], ['triangleleft', [9667]], ['trianglelefteq', [8884]], ['triangleq', [8796]], ['triangleright', [9657]], ['trianglerighteq', [8885]], ['tridot', [9708]], ['trie', [8796]], ['triminus', [10810]], ['TripleDot', [8411]], ['triplus', [10809]], ['trisb', [10701]], ['tritime', [10811]], ['trpezium', [9186]], ['Tscr', [119983]], ['tscr', [120009]], ['TScy', [1062]], ['tscy', [1094]], ['TSHcy', [1035]], ['tshcy', [1115]], ['Tstrok', [358]], ['tstrok', [359]], ['twixt', [8812]], ['twoheadleftarrow', [8606]], ['twoheadrightarrow', [8608]], ['Uacute', [218]], ['uacute', [250]], ['uarr', [8593]], ['Uarr', [8607]], ['uArr', [8657]], ['Uarrocir', [10569]], ['Ubrcy', [1038]], ['ubrcy', [1118]], ['Ubreve', [364]], ['ubreve', [365]], ['Ucirc', [219]], ['ucirc', [251]], ['Ucy', [1059]], ['ucy', [1091]], ['udarr', [8645]], ['Udblac', [368]], ['udblac', [369]], ['udhar', [10606]], ['ufisht', [10622]], ['Ufr', [120088]], ['ufr', [120114]], ['Ugrave', [217]], ['ugrave', [249]], ['uHar', [10595]], ['uharl', [8639]], ['uharr', [8638]], ['uhblk', [9600]], ['ulcorn', [8988]], ['ulcorner', [8988]], ['ulcrop', [8975]], ['ultri', [9720]], ['Umacr', [362]], ['umacr', [363]], ['uml', [168]], ['UnderBar', [95]], ['UnderBrace', [9183]], ['UnderBracket', [9141]], ['UnderParenthesis', [9181]], ['Union', [8899]], ['UnionPlus', [8846]], ['Uogon', [370]], ['uogon', [371]], ['Uopf', [120140]], ['uopf', [120166]], ['UpArrowBar', [10514]], ['uparrow', [8593]], ['UpArrow', [8593]], ['Uparrow', [8657]], ['UpArrowDownArrow', [8645]], ['updownarrow', [8597]], ['UpDownArrow', [8597]], ['Updownarrow', [8661]], ['UpEquilibrium', [10606]], ['upharpoonleft', [8639]], ['upharpoonright', [8638]], ['uplus', [8846]], ['UpperLeftArrow', [8598]], ['UpperRightArrow', [8599]], ['upsi', [965]], ['Upsi', [978]], ['upsih', [978]], ['Upsilon', [933]], ['upsilon', [965]], ['UpTeeArrow', [8613]], ['UpTee', [8869]], ['upuparrows', [8648]], ['urcorn', [8989]], ['urcorner', [8989]], ['urcrop', [8974]], ['Uring', [366]], ['uring', [367]], ['urtri', [9721]], ['Uscr', [119984]], ['uscr', [120010]], ['utdot', [8944]], ['Utilde', [360]], ['utilde', [361]], ['utri', [9653]], ['utrif', [9652]], ['uuarr', [8648]], ['Uuml', [220]], ['uuml', [252]], ['uwangle', [10663]], ['vangrt', [10652]], ['varepsilon', [1013]], ['varkappa', [1008]], ['varnothing', [8709]], ['varphi', [981]], ['varpi', [982]], ['varpropto', [8733]], ['varr', [8597]], ['vArr', [8661]], ['varrho', [1009]], ['varsigma', [962]], ['varsubsetneq', [8842, 65024]], ['varsubsetneqq', [10955, 65024]], ['varsupsetneq', [8843, 65024]], ['varsupsetneqq', [10956, 65024]], ['vartheta', [977]], ['vartriangleleft', [8882]], ['vartriangleright', [8883]], ['vBar', [10984]], ['Vbar', [10987]], ['vBarv', [10985]], ['Vcy', [1042]], ['vcy', [1074]], ['vdash', [8866]], ['vDash', [8872]], ['Vdash', [8873]], ['VDash', [8875]], ['Vdashl', [10982]], ['veebar', [8891]], ['vee', [8744]], ['Vee', [8897]], ['veeeq', [8794]], ['vellip', [8942]], ['verbar', [124]], ['Verbar', [8214]], ['vert', [124]], ['Vert', [8214]], ['VerticalBar', [8739]], ['VerticalLine', [124]], ['VerticalSeparator', [10072]], ['VerticalTilde', [8768]], ['VeryThinSpace', [8202]], ['Vfr', [120089]], ['vfr', [120115]], ['vltri', [8882]], ['vnsub', [8834, 8402]], ['vnsup', [8835, 8402]], ['Vopf', [120141]], ['vopf', [120167]], ['vprop', [8733]], ['vrtri', [8883]], ['Vscr', [119985]], ['vscr', [120011]], ['vsubnE', [10955, 65024]], ['vsubne', [8842, 65024]], ['vsupnE', [10956, 65024]], ['vsupne', [8843, 65024]], ['Vvdash', [8874]], ['vzigzag', [10650]], ['Wcirc', [372]], ['wcirc', [373]], ['wedbar', [10847]], ['wedge', [8743]], ['Wedge', [8896]], ['wedgeq', [8793]], ['weierp', [8472]], ['Wfr', [120090]], ['wfr', [120116]], ['Wopf', [120142]], ['wopf', [120168]], ['wp', [8472]], ['wr', [8768]], ['wreath', [8768]], ['Wscr', [119986]], ['wscr', [120012]], ['xcap', [8898]], ['xcirc', [9711]], ['xcup', [8899]], ['xdtri', [9661]], ['Xfr', [120091]], ['xfr', [120117]], ['xharr', [10231]], ['xhArr', [10234]], ['Xi', [926]], ['xi', [958]], ['xlarr', [10229]], ['xlArr', [10232]], ['xmap', [10236]], ['xnis', [8955]], ['xodot', [10752]], ['Xopf', [120143]], ['xopf', [120169]], ['xoplus', [10753]], ['xotime', [10754]], ['xrarr', [10230]], ['xrArr', [10233]], ['Xscr', [119987]], ['xscr', [120013]], ['xsqcup', [10758]], ['xuplus', [10756]], ['xutri', [9651]], ['xvee', [8897]], ['xwedge', [8896]], ['Yacute', [221]], ['yacute', [253]], ['YAcy', [1071]], ['yacy', [1103]], ['Ycirc', [374]], ['ycirc', [375]], ['Ycy', [1067]], ['ycy', [1099]], ['yen', [165]], ['Yfr', [120092]], ['yfr', [120118]], ['YIcy', [1031]], ['yicy', [1111]], ['Yopf', [120144]], ['yopf', [120170]], ['Yscr', [119988]], ['yscr', [120014]], ['YUcy', [1070]], ['yucy', [1102]], ['yuml', [255]], ['Yuml', [376]], ['Zacute', [377]], ['zacute', [378]], ['Zcaron', [381]], ['zcaron', [382]], ['Zcy', [1047]], ['zcy', [1079]], ['Zdot', [379]], ['zdot', [380]], ['zeetrf', [8488]], ['ZeroWidthSpace', [8203]], ['Zeta', [918]], ['zeta', [950]], ['zfr', [120119]], ['Zfr', [8488]], ['ZHcy', [1046]], ['zhcy', [1078]], ['zigrarr', [8669]], ['zopf', [120171]], ['Zopf', [8484]], ['Zscr', [119989]], ['zscr', [120015]], ['zwj', [8205]], ['zwnj', [8204]]];\n\nvar alphaIndex = {};\nvar charIndex = {};\n\ncreateIndexes(alphaIndex, charIndex);\n\n/**\n * @constructor\n */\nfunction Html5Entities() {}\n\n/**\n * @param {String} str\n * @returns {String}\n */\nHtml5Entities.prototype.decode = function(str) {\n    if (str.length === 0) {\n        return '';\n    }\n    return str.replace(/&(#?[\\w\\d]+);?/g, function(s, entity) {\n        var chr;\n        if (entity.charAt(0) === \"#\") {\n            var code = entity.charAt(1) === 'x' ?\n                parseInt(entity.substr(2).toLowerCase(), 16) :\n                parseInt(entity.substr(1));\n\n            if (!(isNaN(code) || code < -32768 || code > 65535)) {\n                chr = String.fromCharCode(code);\n            }\n        } else {\n            chr = alphaIndex[entity];\n        }\n        return chr || s;\n    });\n};\n\n/**\n * @param {String} str\n * @returns {String}\n */\n Html5Entities.decode = function(str) {\n    return new Html5Entities().decode(str);\n };\n\n/**\n * @param {String} str\n * @returns {String}\n */\nHtml5Entities.prototype.encode = function(str) {\n    var strLength = str.length;\n    if (strLength === 0) {\n        return '';\n    }\n    var result = '';\n    var i = 0;\n    while (i < strLength) {\n        var charInfo = charIndex[str.charCodeAt(i)];\n        if (charInfo) {\n            var alpha = charInfo[str.charCodeAt(i + 1)];\n            if (alpha) {\n                i++;\n            } else {\n                alpha = charInfo[''];\n            }\n            if (alpha) {\n                result += \"&\" + alpha + \";\";\n                i++;\n                continue;\n            }\n        }\n        result += str.charAt(i);\n        i++;\n    }\n    return result;\n};\n\n/**\n * @param {String} str\n * @returns {String}\n */\n Html5Entities.encode = function(str) {\n    return new Html5Entities().encode(str);\n };\n\n/**\n * @param {String} str\n * @returns {String}\n */\nHtml5Entities.prototype.encodeNonUTF = function(str) {\n    var strLength = str.length;\n    if (strLength === 0) {\n        return '';\n    }\n    var result = '';\n    var i = 0;\n    while (i < strLength) {\n        var c = str.charCodeAt(i);\n        var charInfo = charIndex[c];\n        if (charInfo) {\n            var alpha = charInfo[str.charCodeAt(i + 1)];\n            if (alpha) {\n                i++;\n            } else {\n                alpha = charInfo[''];\n            }\n            if (alpha) {\n                result += \"&\" + alpha + \";\";\n                i++;\n                continue;\n            }\n        }\n        if (c < 32 || c > 126) {\n            result += '&#' + c + ';';\n        } else {\n            result += str.charAt(i);\n        }\n        i++;\n    }\n    return result;\n};\n\n/**\n * @param {String} str\n * @returns {String}\n */\n Html5Entities.encodeNonUTF = function(str) {\n    return new Html5Entities().encodeNonUTF(str);\n };\n\n/**\n * @param {String} str\n * @returns {String}\n */\nHtml5Entities.prototype.encodeNonASCII = function(str) {\n    var strLength = str.length;\n    if (strLength === 0) {\n        return '';\n    }\n    var result = '';\n    var i = 0;\n    while (i < strLength) {\n        var c = str.charCodeAt(i);\n        if (c <= 255) {\n            result += str[i++];\n            continue;\n        }\n        result += '&#' + c + ';';\n        i++\n    }\n    return result;\n};\n\n/**\n * @param {String} str\n * @returns {String}\n */\n Html5Entities.encodeNonASCII = function(str) {\n    return new Html5Entities().encodeNonASCII(str);\n };\n\n/**\n * @param {Object} alphaIndex Passed by reference.\n * @param {Object} charIndex Passed by reference.\n */\nfunction createIndexes(alphaIndex, charIndex) {\n    var i = ENTITIES.length;\n    var _results = [];\n    while (i--) {\n        var e = ENTITIES[i];\n        var alpha = e[0];\n        var chars = e[1];\n        var chr = chars[0];\n        var addChar = (chr < 32 || chr > 126) || chr === 62 || chr === 60 || chr === 38 || chr === 34 || chr === 39;\n        var charInfo;\n        if (addChar) {\n            charInfo = charIndex[chr] = charIndex[chr] || {};\n        }\n        if (chars[1]) {\n            var chr2 = chars[1];\n            alphaIndex[alpha] = String.fromCharCode(chr) + String.fromCharCode(chr2);\n            _results.push(addChar && (charInfo[chr2] = alpha));\n        } else {\n            alphaIndex[alpha] = String.fromCharCode(chr);\n            _results.push(addChar && (charInfo[''] = alpha));\n        }\n    }\n}\n\nmodule.exports = Html5Entities;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/html-entities/lib/html5-entities.js\n ** module id = 7\n ** module chunks = 0\n **/","module.exports = function(text){\n\n  // Dashes\n  text = text.replace(/--/g, '–');\n  text = text.replace(/ – /g,'&thinsp;&ndash;&thinsp;');\n\n  // Elipses\n  text = text.replace(/\\.\\.\\./g,'…');\n\n  // Nbsp for punc with spaces\n  var NBSP = '&nbsp;';\n  var NBSP_PUNCTUATION_START = /([«¿¡]) /g;\n  var NBSP_PUNCTUATION_END = / ([\\!\\?:;\\.,‽»])/g;\n\n  text = text.replace(NBSP_PUNCTUATION_START, '$1' + NBSP);\n  text = text.replace(NBSP_PUNCTUATION_END, NBSP + '$1');\n\n  return text;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/punctuation.js\n ** module id = 8\n ** module chunks = 0\n **/","function pull (className, content) {\n  return '<span class=\"pull-' + className +'\">' + (content || '') + '</span>';\n}\n\nfunction push (className, content) {\n  return '<span class=\"push-' + className +'\">' + (content || '') + '</span>';\n}\n\nvar doubleWidth = ['&quot;', '\"', \"“\", \"„\", \"”\", \"&ldquo;\", \"&OpenCurlyDoubleQuote;\", \"&#8220;\", \"&#x0201C;\", \"&rdquor;\", \"&rdquo;\", '&CloseCurlyDoubleQuote;', '&#8221;', '&ldquor;', '&bdquo;', '&#8222;'];\nvar singleWidth = [\"'\", '&prime;', '&apos;', '&lsquo;', '&rsquo;', '‘', '’'];\n\nvar diacriticMap = {\n  'A' : /[\\u0041\\u24B6\\uFF21\\u00C0\\u00C1\\u00C2\\u1EA6\\u1EA4\\u1EAA\\u1EA8\\u00C3\\u0100\\u0102\\u1EB0\\u1EAE\\u1EB4\\u1EB2\\u0226\\u01E0\\u00C4\\u01DE\\u1EA2\\u00C5\\u01FA\\u01CD\\u0200\\u0202\\u1EA0\\u1EAC\\u1EB6\\u1E00\\u0104\\u023A\\u2C6F]/g,\n  'C' : /[\\u0043\\u24B8\\uFF23\\u0106\\u0108\\u010A\\u010C\\u00C7\\u1E08\\u0187\\u023B\\uA73E]/g,\n  'O' : /[\\u004F\\u24C4\\uFF2F\\u00D2\\u00D3\\u00D4\\u1ED2\\u1ED0\\u1ED6\\u1ED4\\u00D5\\u1E4C\\u022C\\u1E4E\\u014C\\u1E50\\u1E52\\u014E\\u022E\\u0230\\u00D6\\u022A\\u1ECE\\u0150\\u01D1\\u020C\\u020E\\u01A0\\u1EDC\\u1EDA\\u1EE0\\u1EDE\\u1EE2\\u1ECC\\u1ED8\\u01EA\\u01EC\\u00D8\\u01FE\\u0186\\u019F\\uA74A\\uA74C]/g,\n  'T' : /[\\u0054\\u24C9\\uFF34\\u1E6A\\u0164\\u1E6C\\u021A\\u0162\\u1E70\\u1E6E\\u0166\\u01AC\\u01AE\\u023E\\uA786]/g,\n  'V' : /[\\u0056\\u24CB\\uFF36\\u1E7C\\u1E7E\\u01B2\\uA75E\\u0245]/g,\n  'W' : /[\\u0057\\u24CC\\uFF37\\u1E80\\u1E82\\u0174\\u1E86\\u1E84\\u1E88\\u2C72]/g,\n  'Y' : /[\\u0059\\u24CE\\uFF39\\u1EF2\\u00DD\\u0176\\u1EF8\\u0232\\u1E8E\\u0178\\u1EF6\\u1EF4\\u01B3\\u024E\\u1EFE]/g,\n  'c' : /[\\u0063\\u24D2\\uFF43\\u0107\\u0109\\u010B\\u010D\\u00E7\\u1E09\\u0188\\u023C\\uA73F\\u2184]/g,\n  'o' : /[\\u006F\\u24DE\\uFF4F\\u00F2\\u00F3\\u00F4\\u1ED3\\u1ED1\\u1ED7\\u1ED5\\u00F5\\u1E4D\\u022D\\u1E4F\\u014D\\u1E51\\u1E53\\u014F\\u022F\\u0231\\u00F6\\u022B\\u1ECF\\u0151\\u01D2\\u020D\\u020F\\u01A1\\u1EDD\\u1EDB\\u1EE1\\u1EDF\\u1EE3\\u1ECD\\u1ED9\\u01EB\\u01ED\\u00F8\\u01FF\\u0254\\uA74B\\uA74D\\u0275]/g,\n  'v' : /[\\u0076\\u24E5\\uFF56\\u1E7D\\u1E7F\\u028B\\uA75F\\u028C]/g,\n  'w' : /[\\u0077\\u24E6\\uFF57\\u1E81\\u1E83\\u0175\\u1E87\\u1E85\\u1E98\\u1E89\\u2C73]/g\n}\n\nvar alignMe = \"CcOoYTAVvWw\".split('');\n\nmodule.exports = function(text, node, $){\n\n  // Remove consecutive double spaces then create\n  // array of distinct words.\n  var words = text.split(' ').join(' ').split(' ');\n\n  for (var i in words) {\n\n    // This is the code to do\n    // optical margin alignment.\n\n    // It's disabled for now due to accessibility issues.\n\n    // for (var a in alignMe) {\n\n    //   var align = alignMe[a];\n    //   var letter = words[i].slice(0,align.length);\n\n    //   if (letter === align || diacriticMap[align] && diacriticMap[align].test(letter)) {\n\n    //     var insert = pull(align, letter);\n\n    //     if (words[(i-1)]) {\n    //       words[(i-1)] = words[(i-1)] + push(align);\n    //     } else if (hasAdjacentText($, node)) {\n    //       insert = push(align) + insert;\n    //     }\n\n    //     words[i] = insert + words[i].slice(align.length);\n\n    //   }\n    // }\n\n    for (var b in singleWidth) {\n\n      var punctuation = singleWidth[b];\n\n      if (words[i].slice(0,punctuation.length) === punctuation) {\n\n        var insert = pull('single', punctuation);\n\n        if (words[(i-1)]) {\n          words[(i-1)] = words[(i-1)] + push('single');\n        } else if (hasAdjacentText($, node)) {\n          insert = push('single') + insert;\n        }\n\n        words[i] = insert + words[i].slice(punctuation.length);\n\n      }\n    }\n\n    for (var c in doubleWidth) {\n\n      var punctuation = doubleWidth[c];\n\n      if (words[i].slice(0,punctuation.length) === punctuation) {\n\n        var insert = pull('double', punctuation);\n\n        if (words[(i-1)]) {\n          words[(i-1)] = words[(i-1)] + push('double');\n        } else if (hasAdjacentText($, node)) {\n          insert = push('double') + insert;\n        }\n\n        words[i] = insert + words[i].slice(punctuation.length);\n      }\n    }\n  }\n\n  text = words.join(' ');\n\n  return text;\n};\n\n\nfunction hasAdjacentText ($, node) {\n\n  // the nearest sibling to this text node\n  // you can have two adjacent text nodes\n  // since they'd jsut be one node.\n\n  // however, the previous sibling could end with a text node\n  // if so, we need to add the spacer to prevent overlap\n  if (node.prev && node.prev.children && node.prev.children.length) {\n\n    var lastChild = node.prev.children.slice(-1)[0];\n\n    if (lastChild && lastChild.type === 'text') {\n      return true;\n    }\n  }\n\n  if (!$(node).parent() || !$(node).parent().length)\n    return false;\n\n  var parentPrev = $(node).parent()[0].prev;\n\n  // Ensure the parent has text content\n  // and is not simply a newline seperating tags\n  if (parentPrev && parentPrev.type === 'text' && parentPrev.data.trim()) {\n    return true;\n  }\n\n  return false;\n\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/hangingPunctuation.js\n ** module id = 9\n ** module chunks = 0\n **/","module.exports = function(text){\n  // replaces wide spaces with hair spaces\n  text = text.replace(/ × /g, ' × ');\n  text = text.replace(/ \\/ /g, ' / ');\n\n  return text;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/spaces.js\n ** module id = 10\n ** module chunks = 0\n **/","var cheerio, jquery, escape;\n\nif (typeof ENV !== 'undefined' && ENV.browser) {\n  jquery = require('jquery');\n  escape = function(text) {\n    return text.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n  };\n} else {\n  cheerio = require('cheerio');\n}\n\n// An easy way to apply a function to each text node\n// doThis accepts a text string of a text node's content\n// and returns the modified string.\n\nvar IGNORE = 'head, code, pre, script, style, [class^=\"pull-\"], [class^=\"push-\"], .small-caps';\n\nmodule.exports = function(html, doThis, options){\n\n  var ignore = IGNORE;\n  var only = (jquery && html) || (options && options.only) || ':root';\n\n  if (options && options.ignore) ignore += ', ' + options.ignore;\n\n  var $ = jquery || cheerio.load(html, {decodeEntities: false});\n\n  var processedText = $(only).each(function(){findTextNodes(this);});\n\n  function findTextNodes(node) {\n\n    if ($(node).is(ignore)) return false;\n\n    $(node).contents().each(function(){\n\n      var childNode = this;\n\n      if (childNode.nodeType === 3) {\n\n        var text = escape ? escape(childNode.data) : childNode.data;\n\n        text = text.replace(/&#39;/g, \"'\");\n        text = text.replace(/&quot;/g, '\"');\n\n        childNode.data = text;\n\n        $(childNode).replaceWith(doThis(text, childNode, $));\n\n      } else {\n        findTextNodes(childNode);\n      }\n    });\n  }\n\n  return (jquery && processedText[0]) || $.html();\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/eachTextNode.js\n ** module id = 11\n ** module chunks = 0\n **/","module.exports = jQuery;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"jQuery\"\n ** module id = 12\n ** module chunks = 0\n **/"],"sourceRoot":""}